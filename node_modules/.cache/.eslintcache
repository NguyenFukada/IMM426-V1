[{"D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\index.js":"1","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\reportWebVitals.js":"2","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\App.js":"3","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\redux\\store.js":"4","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\redux\\action\\counterAction.js":"5","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\redux\\reducer\\rootReducer.js":"6","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\redux\\reducer\\counterReducer.js":"7","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Header\\Header.js":"8","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\User\\User.js":"9","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Admin\\Admin.js":"10","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Home\\HomePage.js":"11","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Admin\\SideBar.js":"12","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Admin\\Content\\Manageuser.js":"13","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Admin\\Content\\DashBoard.js":"14","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Admin\\Content\\ModalCreateUser.js":"15","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Admin\\Content\\ManageUser.js":"16","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\Services\\apiService.js":"17","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\utils\\axiosCustomize.js":"18","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Admin\\Content\\TableUser.js":"19","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Admin\\Content\\ModalUpdateUser.js":"20","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Admin\\Content\\ModalViewUser.js":"21","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Admin\\Content\\ModalDeleteUser.js":"22","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Admin\\Content\\TableUserPaginate.js":"23","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Auth\\Login.js":"24","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\Layout.js":"25","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Auth\\Register.js":"26","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\redux\\reducer\\userReducer.js":"27","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\User\\ListQuiz.js":"28","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\User\\DetailQuiz.js":"29","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\User\\Question.js":"30","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\User\\ModalResult.js":"31","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Admin\\Content\\Quiz\\ManageQuiz.js":"32","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Admin\\Content\\Quiz\\TableQuiz.js":"33","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Admin\\Content\\Quiz\\ModalEditQuiz.js":"34","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Admin\\Content\\Quiz\\ModalDeleteQuiz.js":"35","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Admin\\Content\\Question\\Question.js":"36","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Admin\\Content\\Quiz\\QuizQA.js":"37","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Admin\\Content\\Quiz\\AssignQuiz.js":"38","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\User\\QuizContent\\RightContent.js":"39","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\User\\QuizContent\\CountDown.js":"40","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\Route\\PrivateRoute.js":"41","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\redux\\action\\userAction.js":"42","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Header\\Language.js":"43","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\utils\\i18n.js":"44","D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\index.js":"45","D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\reportWebVitals.js":"46","D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\Layout.js":"47","D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\App.js":"48","D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\utils\\i18n.js":"49","D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\component\\Header.js":"50","D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\redux\\store.js":"51","D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\component\\FirstPage.js":"52","D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\component\\DatePicker.js":"53","D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\utils\\KeyCodeUtils.js":"54","D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\component\\SecondPage.js":"55","D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\component\\FormNationCard.js":"56","D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\component\\ThirdPage.js":"57","D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\component\\FourPage.js":"58","D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\component\\FifthPage.js":"59","D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\component\\SixPage.js":"60","D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\component\\SevenPage.js":"61","D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\component\\DetailStudies.js":"62","D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\component\\EightPage_New.js":"63","D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\component\\NinePage.js":"64","D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\component\\TenthPage.js":"65","D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\component\\EleventhPage.js":"66","D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\component\\TwelvethPage.js":"67","D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\component\\ThreeTeenthPage.js":"68","D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\redux\\reducer\\rootReducer.js":"69","D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\redux\\reducer\\userReducer.js":"70","D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\component\\Notice.js":"71","D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\component\\FourteenPage.js":"72","D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\component\\SubmitPage.js":"73"},{"size":1122,"mtime":1687504353806,"results":"74","hashOfConfig":"75"},{"size":362,"mtime":499162500000,"results":"76","hashOfConfig":"75"},{"size":742,"mtime":1687103093852,"results":"77","hashOfConfig":"75"},{"size":634,"mtime":1684803006398,"results":"78","hashOfConfig":"75"},{"size":266,"mtime":1653057474077,"results":"79","hashOfConfig":"75"},{"size":258,"mtime":1684766477413,"results":"80","hashOfConfig":"75"},{"size":519,"mtime":1653057415985,"results":"81","hashOfConfig":"75"},{"size":2884,"mtime":1687503354822,"results":"82","hashOfConfig":"75"},{"size":130,"mtime":1684013159184,"results":"83","hashOfConfig":"75"},{"size":1589,"mtime":1687529820535,"results":"84","hashOfConfig":"75"},{"size":1302,"mtime":1687506685533,"results":"85","hashOfConfig":"75"},{"size":3816,"mtime":1686702189231,"results":"86","hashOfConfig":"75"},{"size":939,"mtime":1684482425391,"results":"87","hashOfConfig":"75"},{"size":3976,"mtime":1687579841181,"results":"88","hashOfConfig":"75"},{"size":5610,"mtime":1684742397412,"results":"89","hashOfConfig":"75"},{"size":4433,"mtime":1686702030808,"results":"90","hashOfConfig":"75"},{"size":3656,"mtime":1687578997307,"results":"91","hashOfConfig":"75"},{"size":1364,"mtime":1684812600638,"results":"92","hashOfConfig":"75"},{"size":2001,"mtime":1684639909029,"results":"93","hashOfConfig":"75"},{"size":5282,"mtime":1686476572882,"results":"94","hashOfConfig":"75"},{"size":3762,"mtime":1684635648521,"results":"95","hashOfConfig":"75"},{"size":1661,"mtime":1684670561894,"results":"96","hashOfConfig":"75"},{"size":3351,"mtime":1684670782567,"results":"97","hashOfConfig":"75"},{"size":3589,"mtime":1687503419968,"results":"98","hashOfConfig":"75"},{"size":2668,"mtime":1687507374932,"results":"99","hashOfConfig":"75"},{"size":4341,"mtime":1684841018835,"results":"100","hashOfConfig":"75"},{"size":1737,"mtime":1687493963406,"results":"101","hashOfConfig":"75"},{"size":1672,"mtime":1687485769827,"results":"102","hashOfConfig":"75"},{"size":5549,"mtime":1687508380068,"results":"103","hashOfConfig":"75"},{"size":2144,"mtime":1687146724113,"results":"104","hashOfConfig":"75"},{"size":1148,"mtime":1684999014428,"results":"105","hashOfConfig":"75"},{"size":4651,"mtime":1687101602924,"results":"106","hashOfConfig":"75"},{"size":3035,"mtime":1686494129345,"results":"107","hashOfConfig":"75"},{"size":4403,"mtime":1686479769257,"results":"108","hashOfConfig":"75"},{"size":1465,"mtime":1686494209231,"results":"109","hashOfConfig":"75"},{"size":13530,"mtime":1687104597616,"results":"110","hashOfConfig":"75"},{"size":15357,"mtime":1687141210860,"results":"111","hashOfConfig":"75"},{"size":2555,"mtime":1687105863276,"results":"112","hashOfConfig":"75"},{"size":1893,"mtime":1687427649595,"results":"113","hashOfConfig":"75"},{"size":984,"mtime":1687424086069,"results":"114","hashOfConfig":"75"},{"size":472,"mtime":1687486360453,"results":"115","hashOfConfig":"75"},{"size":423,"mtime":1687493224834,"results":"116","hashOfConfig":"75"},{"size":719,"mtime":1687506151428,"results":"117","hashOfConfig":"75"},{"size":882,"mtime":1687579327604,"results":"118","hashOfConfig":"75"},{"size":1089,"mtime":1687696150529,"results":"119","hashOfConfig":"120"},{"size":362,"mtime":499162500000,"results":"121","hashOfConfig":"120"},{"size":2639,"mtime":1687753781351,"results":"122","hashOfConfig":"120"},{"size":525,"mtime":1687704119645,"results":"123","hashOfConfig":"120"},{"size":882,"mtime":1687579327604,"results":"124","hashOfConfig":"120"},{"size":683,"mtime":1687682881452,"results":"125","hashOfConfig":"120"},{"size":634,"mtime":1687605969088,"results":"126","hashOfConfig":"120"},{"size":10471,"mtime":1687744148742,"results":"127","hashOfConfig":"120"},{"size":4806,"mtime":1687617935055,"results":"128","hashOfConfig":"120"},{"size":651,"mtime":1687617918222,"results":"129","hashOfConfig":"120"},{"size":19315,"mtime":1687754418980,"results":"130","hashOfConfig":"120"},{"size":3331,"mtime":1687697098584,"results":"131","hashOfConfig":"120"},{"size":5445,"mtime":1687754434618,"results":"132","hashOfConfig":"120"},{"size":3302,"mtime":1687754407619,"results":"133","hashOfConfig":"120"},{"size":7487,"mtime":1687754400947,"results":"134","hashOfConfig":"120"},{"size":5053,"mtime":1687754424915,"results":"135","hashOfConfig":"120"},{"size":4516,"mtime":1687754421836,"results":"136","hashOfConfig":"120"},{"size":5877,"mtime":1687745165858,"results":"137","hashOfConfig":"120"},{"size":4382,"mtime":1687754389252,"results":"138","hashOfConfig":"120"},{"size":9821,"mtime":1687754416202,"results":"139","hashOfConfig":"120"},{"size":13056,"mtime":1687754430690,"results":"140","hashOfConfig":"120"},{"size":23148,"mtime":1687754396168,"results":"141","hashOfConfig":"120"},{"size":8478,"mtime":1687754440489,"results":"142","hashOfConfig":"120"},{"size":21271,"mtime":1687754437655,"results":"143","hashOfConfig":"120"},{"size":180,"mtime":1687695045319,"results":"144","hashOfConfig":"120"},{"size":1844,"mtime":1687749592518,"results":"145","hashOfConfig":"120"},{"size":659,"mtime":1687703915310,"results":"146","hashOfConfig":"120"},{"size":14060,"mtime":1687754349543,"results":"147","hashOfConfig":"120"},{"size":2126,"mtime":1687754491735,"results":"148","hashOfConfig":"120"},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"153"},"58d4ez",{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"153"},{"filePath":"161","messages":"162","suppressedMessages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"153"},{"filePath":"177","messages":"178","suppressedMessages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"183","messages":"184","suppressedMessages":"185","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"153"},{"filePath":"187","messages":"188","suppressedMessages":"189","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"153"},{"filePath":"191","messages":"192","suppressedMessages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"194","messages":"195","suppressedMessages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"197","messages":"198","suppressedMessages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"153"},{"filePath":"201","messages":"202","suppressedMessages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"153"},{"filePath":"205","messages":"206","suppressedMessages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"208","messages":"209","suppressedMessages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"211","messages":"212","suppressedMessages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"214","messages":"215","suppressedMessages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"153"},{"filePath":"218","messages":"219","suppressedMessages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"153"},{"filePath":"222","messages":"223","suppressedMessages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"225","usedDeprecatedRules":"153"},{"filePath":"226","messages":"227","suppressedMessages":"228","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"153"},{"filePath":"230","messages":"231","suppressedMessages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"233","messages":"234","suppressedMessages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"153"},{"filePath":"237","messages":"238","suppressedMessages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"240","messages":"241","suppressedMessages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"243","messages":"244","suppressedMessages":"245","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"246","messages":"247","suppressedMessages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249","usedDeprecatedRules":"153"},{"filePath":"250","messages":"251","suppressedMessages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253","usedDeprecatedRules":"153"},{"filePath":"254","messages":"255","suppressedMessages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"153"},{"filePath":"258","messages":"259","suppressedMessages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261","usedDeprecatedRules":"153"},{"filePath":"262","messages":"263","suppressedMessages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"265","messages":"266","suppressedMessages":"267","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"268","usedDeprecatedRules":"153"},{"filePath":"269","messages":"270","suppressedMessages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"153"},{"filePath":"273","messages":"274","suppressedMessages":"275","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"153"},{"filePath":"277","messages":"278","suppressedMessages":"279","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"280","usedDeprecatedRules":"153"},{"filePath":"281","messages":"282","suppressedMessages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"284","messages":"285","suppressedMessages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"287","messages":"288","suppressedMessages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"153"},{"filePath":"291","messages":"292","suppressedMessages":"293","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"294","usedDeprecatedRules":"153"},{"filePath":"295","messages":"296","suppressedMessages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"153"},{"filePath":"298","messages":"299","suppressedMessages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"153"},{"filePath":"302","messages":"303","suppressedMessages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"305","messages":"306","suppressedMessages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"iowv7s",{"filePath":"308","messages":"309","suppressedMessages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"311"},{"filePath":"312","messages":"313","suppressedMessages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"315","messages":"316","suppressedMessages":"317","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"318","messages":"319","suppressedMessages":"320","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"321","messages":"322","suppressedMessages":"323","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"324","messages":"325","suppressedMessages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"327"},{"filePath":"328","messages":"329","suppressedMessages":"330","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"331","messages":"332","suppressedMessages":"333","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"334","messages":"335","suppressedMessages":"336","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"337","messages":"338","suppressedMessages":"339","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"340","messages":"341","suppressedMessages":"342","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"343","messages":"344","suppressedMessages":"345","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"346","messages":"347","suppressedMessages":"348","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"349","messages":"350","suppressedMessages":"351","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"352","messages":"353","suppressedMessages":"354","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"355","messages":"356","suppressedMessages":"357","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"358","messages":"359","suppressedMessages":"360","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"361","messages":"362","suppressedMessages":"363","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"364","messages":"365","suppressedMessages":"366","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"367","messages":"368","suppressedMessages":"369","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"370","messages":"371","suppressedMessages":"372","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"373","messages":"374","suppressedMessages":"375","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"376","messages":"377","suppressedMessages":"378","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"379","messages":"380","suppressedMessages":"381","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"382","messages":"383","suppressedMessages":"384","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"385","messages":"386","suppressedMessages":"387","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"388","messages":"389","suppressedMessages":"390","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"391","messages":"392","suppressedMessages":"393","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\index.js",["394"],[],"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store, persistor } from './redux/store';\nimport { BrowserRouter} from \"react-router-dom\";\nimport Layout from './Layout';\nimport { PersistGate } from 'redux-persist/integration/react'\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-perfect-scrollbar/dist/css/styles.css'\nimport 'nprogress/nprogress.css'\nimport \"react-awesome-lightbox/build/style.css\";\nimport i18n from './utils/i18n';\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\nroot.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n    <BrowserRouter>\n      <Layout />\n    </BrowserRouter>\n    {/* <React.StrictMode>\n      <App />\n    </React.StrictMode> */}\n    </PersistGate>\n  </Provider>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",[],"D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\reportWebVitals.js",[],[],"D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\App.js",["395"],[],"import PerfectScrollbar from 'react-perfect-scrollbar'\nimport './App.scss'; \nimport Header from './component/Header/Header';\nimport {  Link } from \"react-router-dom\";\nimport { Outlet } from \"react-router-dom\";\nconst App = () => {\n  // const count = useSelector(state => state.counter.count);\n  // const dispatch = useDispatch();\n\n  return (\n    <div className=\"app-container\">\n      <div className=\"header-container\">\n        <Header></Header>\n      </div>\n      <div className='main-container'>\n        <div className='sidenav-container'>\n\n        </div>\n        <div className='app-content'>\n          < PerfectScrollbar>\n            <Outlet />\n          </PerfectScrollbar>\n      </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\redux\\store.js",[],[],"D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\redux\\action\\counterAction.js",[],[],"D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\redux\\reducer\\rootReducer.js",[],[],"D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\redux\\reducer\\counterReducer.js",[],[],"D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Header\\Header.js",["396","397"],[],"import Container from 'react-bootstrap/Container';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport NavDropdown from 'react-bootstrap/NavDropdown';\r\nimport { Link, NavLink, useNavigate } from \"react-router-dom\";\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { logout } from '../../Services/apiService';\r\nimport { toast } from 'react-toastify';\r\nimport { doLogin, doLogout } from '../../redux/action/userAction';\r\nimport Language from './Language';\r\nconst Header = () => {\r\n    const navigate = useNavigate();\r\n    const account = useSelector(state => state.user.account);\r\n    const dispatch = useDispatch();\r\n    const isAuthenticated = useSelector(state => state.user.isAuthenticated);\r\n    const handleLogin = () => {\r\n        navigate('/login');\r\n    }\r\n    const handleRegister = () => {\r\n        navigate('/register');\r\n    }\r\n    const handleLogout = async () => {\r\n        console.log(account.email, account.refresh_token);\r\n        let res = await logout(account.email, account.refresh_toke);\r\n        if (res && res.EC === 0){\r\n            // clear data redux\r\n            dispatch(doLogout())\r\n            navigate('/login');\r\n        }else{\r\n            toast.error(res.EM);\r\n        }\r\n    }\r\n    return (\r\n        <Navbar bg=\"light\" expand=\"lg\">\r\n            <Container>\r\n                {/* <Navbar.Brand href=\"#home\">React-Bootstrap</Navbar.Brand> */}\r\n                <NavLink to='/' className='navbar-brand'>LOGHORIZON</NavLink>\r\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                    <Nav className=\"me-auto\">\r\n                        <NavLink to='/home' className='nav-link'>HOME</NavLink>\r\n                        <NavLink to='/users' className='nav-link'>USERS</NavLink>\r\n                        <NavLink to='/admins' className='nav-link'>ADMIN</NavLink>\r\n                    </Nav>\r\n                    <Nav>\r\n                        {isAuthenticated === false ?\r\n                            <>\r\n                                <button className='btn-login' onClick={() => handleLogin()}>Log in</button>\r\n                                <button className='btn-signup' onClick={() => handleRegister()}>Sign up</button>\r\n                            </>\r\n                            :\r\n                            <NavDropdown title=\"Setting\" id=\"basic-nav-dropdown\">\r\n                                <NavDropdown.Item onClick={() => handleLogout()} >Log out</NavDropdown.Item>\r\n                                <NavDropdown.Item >Profile</NavDropdown.Item>\r\n                            </NavDropdown>\r\n                        }\r\n                        <Language />\r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Container>\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nexport default Header;","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\User\\User.js",[],[],"D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Admin\\Admin.js",[],[],"D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Home\\HomePage.js",["398"],[],"import { useNavigate } from 'react-router-dom';\r\nimport videoHomePage from '../../assets/video-homepage.mp4'\r\nimport { useSelector } from 'react-redux'\r\nimport { useTranslation, Trans} from 'react-i18next';\r\n\r\nconst HomePage = () => {\r\n    const isAuthenticated = useSelector(state => state.user.isAuthenticated);\r\n    const navigate = useNavigate();\r\n    const { t } = useTranslation();\r\n    return (\r\n        <div className=\"homepage-container\">\r\n            <video autoPlay muted loop>\r\n                <source src={videoHomePage} type=\"video/mp4\">\r\n                </source>\r\n            </video>\r\n            <div className='homepage-content'>\r\n                <div className='title-1'>\r\n                {t('homepage.title1')}\r\n                </div>\r\n                <div className='title-2'>\r\n                    {t('homepage.title2')}\r\n                </div>\r\n                <div className='title-3'>\r\n                    {isAuthenticated === true ?\r\n                        <button className='btn btn-primary' onClick={()=>navigate('/users')}>Start quiz now</button>\r\n                        : <button className='btn-title-3' onClick={() => navigate('/login')}>Get's started. It free</button>}\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomePage","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Admin\\SideBar.js",["399"],[],"import 'react-pro-sidebar/dist/css/styles.css'\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport {\r\n    ProSidebar,\r\n    Menu,\r\n    MenuItem,\r\n    SubMenu,\r\n    SidebarHeader,\r\n    SidebarFooter,\r\n    SidebarContent,\r\n} from 'react-pro-sidebar';\r\nimport { FaTachometerAlt, FaGem} from 'react-icons/fa';\r\nimport sidebarBg from '../../assets/bg2.jpg';\r\nimport { DiReact } from \"react-icons/di\"\r\nimport '../Admin/SideBar.scss'\r\nimport {MdDashboard} from \"react-icons/md\"\r\nimport './SideBar.scss'\r\nconst SideBar = ({ image, collapsed, rtl, toggled, handleToggleSidebar }) => {\r\n    const navigate = useNavigate();\r\n    return(\r\n        <> \r\n            <ProSidebar\r\n                image={sidebarBg}\r\n                collapsed={collapsed}\r\n                toggled={toggled}\r\n                breakPoint=\"md\"\r\n                onToggle={handleToggleSidebar}\r\n            >\r\n                <SidebarHeader className='sidebarheader'>\r\n                    <div\r\n                        style={{\r\n                            padding: '24px',\r\n                            textTransform: 'uppercase',\r\n                            fontWeight: 'bold',\r\n                            fontSize: 14,\r\n                            letterSpacing: '1px',\r\n                            overflow: 'hidden',\r\n                            textOverflow: 'ellipsis',\r\n                            whiteSpace: 'nowrap',\r\n                        }}\r\n                    >\r\n                    <DiReact  size={'3em'} color={\"00bfff\"}/>\r\n                        <span onClick={()=>navigate('/')} className='title-direact'>LOGHORIZON</span>\r\n                    </div>\r\n                </SidebarHeader>\r\n\r\n                <SidebarContent>\r\n                    <Menu iconShape=\"circle\">\r\n                        <MenuItem\r\n                            icon={<FaTachometerAlt />}\r\n                            suffix={<span className=\"badge red\">New</span>}\r\n                        >\r\n                            Dashboard\r\n                            <Link to=\"/admins\" />\r\n                        </MenuItem>\r\n                    </Menu>\r\n                    <Menu iconShape=\"circle\">\r\n                        <SubMenu\r\n                            icon={<FaGem />}\r\n                            title=\"Features\"\r\n                        >\r\n                            <MenuItem> Quản lý Users\r\n                                <Link to=\"/admins/manage-users\" /></MenuItem>\r\n                            <MenuItem > Quản lý Bài Quiz\r\n                                <Link to=\"/admins/manage-quizzes\" /></MenuItem>\r\n                            <MenuItem> Quản lý Câu Hỏi\r\n                                <Link to=\"/admins/manage-questions\" /></MenuItem>\r\n                        </SubMenu>\r\n                    </Menu>\r\n                </SidebarContent>\r\n\r\n                <SidebarFooter style={{ textAlign: 'center' }}>\r\n                    <div\r\n                        className=\"sidebar-btn-wrapper\"\r\n                        style={{\r\n                            padding: '20px 24px',\r\n                        }}\r\n                    >\r\n                        <a\r\n                            href=\"https://github.com/azouaoui-med/react-pro-sidebar\"\r\n                            target=\"_blank\"\r\n                            className=\"sidebar-btn\"\r\n                            rel=\"noopener noreferrer\"\r\n                        >\r\n                           \r\n                            <span style={{ whiteSpace: 'nowrap', textOverflow: 'ellipsis', overflow: 'hidden' }}>\r\n                                &#169; Loghorizon\r\n                            </span>\r\n                        </a>\r\n                    </div>\r\n                </SidebarFooter>\r\n            </ProSidebar>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SideBar;","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Admin\\Content\\Manageuser.js",[],[],"D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Admin\\Content\\DashBoard.js",["400"],[],"D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Admin\\Content\\ModalCreateUser.js",["401","402","403"],[],"import React, { useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport { HiOutlineViewGridAdd } from 'react-icons/hi';\r\nimport {  toast } from \"react-toastify\";\r\nimport { Toast } from 'bootstrap';\r\nimport { postcreateNewUser } from '../../../Services/apiService'\r\nconst ModalCreateUser = (props) => {\r\n    const { show, setShow } = props\r\n    const [email,setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [userName, setUsername] = useState('');\r\n    const [image, setImage] = useState('')\r\n    const [role,setRole] = useState('USER');\r\n    const handleClose = () => {\r\n        setShow(false);\r\n        setEmail(\"\"); setPassword(\"\"); setUsername(\"\"); setImage(\"\"); setRole(\"USER\"); setPreviewImg(\"\");\r\n    }\r\n    const handleShow = () => setShow(true);\r\n    const [previewImg, setPreviewImg] = useState('')\r\n    \r\n    const hanleUploadImage = (Event) => {\r\n        if (Event && Event.target && Event.target.files[0]){\r\n        setPreviewImg(URL.createObjectURL(Event.target.files[0]));\r\n        setImage(Event.target.files[0])\r\n    }\r\n        else{\r\n            \r\n        }\r\n    }\r\n    const validateEmail = (email) => {\r\n        return String(email)\r\n            .toLowerCase()\r\n            .match(\r\n                /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|.(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/\r\n            );\r\n    };\r\n    const handleSubmitCreateUser = async () => { \r\n        //validate\r\n        const isValidEmail = validateEmail(email);\r\n        if (!isValidEmail){\r\n            toast.error(\"Email is invalid! Please try again!\")\r\n            return;\r\n        }\r\n        if (!password) {\r\n            toast.error(\"Password is invalid! Please try again!\")\r\n            return;\r\n        }\r\n        \r\n\r\n        let res = await postcreateNewUser(email, password, userName,role,image);\r\n        console.log('component response: ', res);\r\n        if (res && res.EC === 0){\r\n            toast.success(res.EM);\r\n            handleClose();\r\n            // await props.fetchListUser();\r\n            props.setCurrentPage(1);\r\n            await props.fetchListUserWithPaginate(1);\r\n        }\r\n        if(res && res.EC !== 0){\r\n            toast.error(res.EM);\r\n        }\r\n\r\n        \r\n    }\r\n    return (\r\n        <>\r\n            {/* <Button variant=\"primary\" onClick={handleShow}>\r\n                Launch demo modal\r\n            </Button> */}\r\n\r\n            <Modal show={show} onHide={handleClose} size='xl' backdrop=\"static\"\r\n            className='modal-add-user'>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Add new user</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <form className=\"row g-3\">\r\n                        <div className=\"col-md-6\">\r\n                            <label className=\"form-label\" >Email</label>\r\n                            <input type=\"email\" className=\"form-control\" value={email}\r\n                                onChange={(Event) => setEmail(Event.target.value)} />\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <label className=\"form-label\" >Password</label>\r\n                            <input type=\"password\" className=\"form-control\" value={password}\r\n                                onChange={(Event) => setPassword(Event.target.value)} />\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <label className=\"form-label\" >Username</label>\r\n                            <input value={userName}\r\n                            onChange={(Event) => setUsername(Event.target.value)}\r\n                            type=\"text\" className=\"form-control\" placeholder=\"Apartment, studio, or floor\" />\r\n                        </div>\r\n                        <div className=\"col-md-4\">\r\n                            <label className=\"form-label\">Role</label>\r\n                            <select className=\"form-select\" value={role} onChange={(Event) => setRole(Event.target.value)}>\r\n                                <option selected value=\"USER\">USER</option>\r\n                                <option value=\"ADMIN\">ADMIN</option>\r\n                            </select>\r\n                        </div>\r\n                        <div className='col-md-12'>\r\n                            <label className=\"form-label label-upload\" htmlFor='labelUpload'>\r\n                                <HiOutlineViewGridAdd />Upload Image </label>\r\n                            <input type='file' hidden id='labelUpload'\r\n                            onChange={(Event) => hanleUploadImage(Event)}></input>\r\n                        </div>\r\n                        <div className='col-md-12 img-preview'>\r\n                            {previewImg ? <img src= {previewImg} />\r\n                                : <span>Preview Image</span> }\r\n                           \r\n                            \r\n                        </div>\r\n                    </form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={() => handleSubmitCreateUser()}>\r\n                        Save Changes\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ModalCreateUser","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Admin\\Content\\ManageUser.js",["404"],[],"import ModalCreateUser from \"./ModalCreateUser\"\r\nimport './ManageUser.scss'\r\nimport {FcPlus} from 'react-icons/fc'\r\nimport TableUser from \"./TableUser\"\r\nimport { useEffect, useState } from \"react\"\r\nimport { getAllUser, getUserWithPaginate } from \"../../../Services/apiService\";\r\nimport ModalUpdateUser from \"./ModalUpdateUser\"\r\nimport ModalViewUser from \"./ModalViewUser\"\r\nimport ModalDeleteUser from \"./ModalDeleteUser\"\r\nimport TableUserPaginate from \"./TableUserPaginate\"\r\nconst ManageUser = (props) => {\r\n    const LIMIT_USER = 4;\r\n    const [pageCount, setPageCount] = useState(0);\r\n    const [currentPage, setCurrentPage] = useState(0);\r\n    const [showModalCreateuser, setshowModalCreateuser] = useState(false);\r\n    const [showModalUpdateUser,setshowModalUpdateUser] = useState(false);\r\n    const [showViewUser, setShowViewUser] = useState(false);\r\n    const [showModalDelte,setShowModalDelete] = useState(false);\r\n    const [dataUpdate,setdataUpdate] = useState({})\r\n    const[dataView, setdataView] = useState({})\r\n    const [dataDelete, setdataDelete] = useState({})\r\n    const [listUsers, setListUsers] = useState([]);\r\n    useEffect(() => {\r\n        // fetchListUser();\r\n        fetchListUserWithPaginate(1);\r\n    }, []);\r\n    const fetchListUser = async () => {\r\n        let res = await getAllUser();\r\n        if (res.EC === 0) {\r\n            setListUsers(res.DT);\r\n        }\r\n    }\r\n    const fetchListUserWithPaginate = async (page) => {\r\n        let res = await getUserWithPaginate(page,LIMIT_USER);\r\n        if (res.EC === 0) {\r\n            setListUsers(res.DT.users);\r\n            setPageCount(res.DT.totalPages);\r\n        }\r\n    }\r\n    const handleClickUpdateUser = (user) => {\r\n        setshowModalUpdateUser(true);\r\n        setdataUpdate(user);\r\n    }\r\n    const handleViewUser = (user) => {\r\n        setShowViewUser(true);\r\n        setdataView(user);\r\n    }\r\n    const handleDeleteUser = (user) => {\r\n         setShowModalDelete(true);\r\n        setdataDelete(user)\r\n    }\r\n    const resetData = () => {\r\n        setdataUpdate({})\r\n    }\r\n    return (\r\n        <div className=\"manage-user-container\">\r\n            <div className=\"title\">\r\n                Manage User\r\n            </div>\r\n            <div className=\"uers-content\">\r\n                <div className=\"btn-add-new\">\r\n                    <button className=\"btn btn-primary\" onClick={() => setshowModalCreateuser(true)}><FcPlus />Add new user</button>\r\n                </div>\r\n                <div className=\"table-users-container\">\r\n                    <TableUserPaginate listUsers={listUsers}\r\n                    handleClickUpdateUser={handleClickUpdateUser}\r\n                    handleViewUser={handleViewUser}\r\n                    handleDeleteUser={handleDeleteUser}\r\n                    fetchListUserWithPaginate={fetchListUserWithPaginate}\r\n                    pageCount = {pageCount}\r\n                    currentPage={currentPage}\r\n                    setCurrentPage={setCurrentPage}/>\r\n                </div>\r\n                <ModalCreateUser show={showModalCreateuser} \r\n                setShow={setshowModalCreateuser}\r\n                fetchListUser = {fetchListUser}\r\n                fetchListUserWithPaginate={fetchListUserWithPaginate}\r\n                />\r\n                <ModalUpdateUser \r\n                    show={showModalUpdateUser}\r\n                    setShow={setshowModalUpdateUser}\r\n                    dataUpdate = {dataUpdate} \r\n                    fetchListUser={fetchListUser}\r\n                    resetData={resetData}\r\n                    fetchListUserWithPaginate={fetchListUserWithPaginate}\r\n                    currentPage={currentPage}\r\n                    setCurrentPage={setCurrentPage}\r\n                />\r\n                <ModalViewUser \r\n                    show={showViewUser}\r\n                    dataView={dataView}\r\n                    setShow={setShowViewUser} \r\n                    resetData={resetData}/>\r\n                <ModalDeleteUser \r\n                    show={showModalDelte}\r\n                    setShow={setShowModalDelete}\r\n                    dataDelete={dataDelete}\r\n                    fetchListUser={fetchListUser}\r\n                    fetchListUserWithPaginate={fetchListUserWithPaginate}\r\n                    currentPage={currentPage}\r\n                    setCurrentPage={setCurrentPage}\r\n                   />\r\n    \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default ManageUser","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\Services\\apiService.js",["405"],[],"D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\utils\\axiosCustomize.js",[],[],"D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Admin\\Content\\TableUser.js",[],[],"D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Admin\\Content\\ModalUpdateUser.js",["406","407","408"],[],"import React, { useEffect, useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport { HiOutlineViewGridAdd } from 'react-icons/hi';\r\nimport { toast } from \"react-toastify\";\r\nimport { Toast } from 'bootstrap';\r\nimport _ from 'lodash'\r\nimport { putUpdateUser } from '../../../Services/apiService'\r\nconst ModalUpdateUser = (props) => {\r\n    const { show, setShow, dataUpdate} = props\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [userName, setUsername] = useState('');\r\n    const [image, setImage] = useState('')\r\n    const [role, setRole] = useState('USER');\r\n\r\n\r\n    const handleClose = () => {\r\n        setShow(false);\r\n        setEmail(\"\"); setPassword(\"\"); setUsername(\"\"); setImage(\"\"); setRole(\"USER\"); setPreviewImg(\"\");\r\n        props.resetData();\r\n    }\r\n    useEffect(() => {\r\n        if (!_.isEmpty(dataUpdate)) {\r\n            setEmail(dataUpdate.email);\r\n            setUsername(dataUpdate.username);\r\n            setRole(dataUpdate.role);\r\n            if (dataUpdate.image) {\r\n                setPreviewImg(`data:image/jpeg;base64,${dataUpdate.image}`)\r\n            }\r\n        }\r\n    }, [props.dataUpdate])\r\n    const [previewImg, setPreviewImg] = useState('')\r\n\r\n    const hanleUploadImage = (Event) => {\r\n        if (Event && Event.target && Event.target.files[0]) {\r\n            setPreviewImg(URL.createObjectURL(Event.target.files[0]));\r\n            setImage(Event.target.files[0])\r\n        }\r\n        else {\r\n\r\n        }\r\n    }\r\n\r\n    const handleSubmitCreateUser = async () => {\r\n        let res = await putUpdateUser(dataUpdate.id, userName, role, image);\r\n        if (res && res.EC === 0) {\r\n            toast.success(res.EM);\r\n            handleClose();\r\n            // await props.fetchListUser();\r\n            // props.setCurrentPage(1);\r\n            await props.fetchListUserWithPaginate(props.currentPage);\r\n        }\r\n        if (res && res.EC !== 0) {\r\n            toast.error(res.EM);\r\n        }\r\n\r\n\r\n    }\r\n    return (\r\n        <>\r\n            {/* <Button variant=\"primary\" onClick={handleShow}>\r\n                Launch demo modal\r\n            </Button> */}\r\n\r\n            <Modal show={show} onHide={handleClose} size='xl' backdrop=\"static\"\r\n                className='modal-add-user'>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Update a user</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <form className=\"row g-3\">\r\n                        <div className=\"col-md-6\">\r\n                            <label className=\"form-label\" >Email</label>\r\n                            <input type=\"email\" className=\"form-control\" value={email} disabled\r\n                                onChange={(Event) => setEmail(Event.target.value)} />\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <label className=\"form-label\" >Password</label>\r\n                            <input type=\"password\" className=\"form-control\" value={password} disabled\r\n                                onChange={(Event) => setPassword(Event.target.value)} />\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <label className=\"form-label\" >Username</label>\r\n                            <input value={userName}\r\n                                onChange={(Event) => setUsername(Event.target.value)}\r\n                                type=\"text\" className=\"form-control\" placeholder=\"Apartment, studio, or floor\" />\r\n                        </div>\r\n                        <div className=\"col-md-4\">\r\n                            <label className=\"form-label\">Role</label>\r\n                            <select className=\"form-select\" value={role} onChange={(Event) => setRole(Event.target.value)}>\r\n                                <option selected value=\"USER\">USER</option>\r\n                                <option value=\"ADMIN\">ADMIN</option>\r\n                            </select>\r\n                        </div>\r\n                        <div className='col-md-12'>\r\n                            <label className=\"form-label label-upload\" htmlFor='labelUpload'>\r\n                                <HiOutlineViewGridAdd />Upload Image </label>\r\n                            <input type='file' hidden id='labelUpload'\r\n                                onChange={(Event) => hanleUploadImage(Event)}></input>\r\n                        </div>\r\n                        <div className='col-md-12 img-preview'>\r\n                            {previewImg ? <img src={previewImg} />\r\n                                : <span>Preview Image</span>}\r\n                        </div>\r\n                    </form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={() => handleSubmitCreateUser()}>\r\n                        Save Changes\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ModalUpdateUser","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Admin\\Content\\ModalViewUser.js",["409","410","411","412"],[],"import React, { useEffect, useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport { HiOutlineViewGridAdd } from 'react-icons/hi';\r\nimport _ from 'lodash'\r\nconst ModalViewUser = (props) => {\r\n    const { show, setShow, dataView, resetData } = props\r\n    const [email, setEmail] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [userName, setUsername] = useState('');\r\n    const [image, setImage] = useState('')\r\n    const [role, setRole] = useState('USER');\r\n    const [previewImg, setPreviewImg] = useState('')\r\n\r\n    const handleClose = () => {\r\n        setShow(false);\r\n        setEmail(\"\"); setPassword(\"\"); setUsername(\"\"); setImage(\"\"); setRole(\"USER\"); setPreviewImg(\"\");\r\n        props.resetData();\r\n    }\r\n    useEffect(() => {\r\n        if (!_.isEmpty(dataView)) {\r\n            setEmail(dataView.email);\r\n            setUsername(dataView.username);\r\n            setRole(dataView.role);\r\n            if (dataView.image) {\r\n                setPreviewImg(`data:image/jpeg;base64,${dataView.image}`)\r\n            }\r\n        }\r\n    }, [props.dataView])\r\n    \r\n\r\n    return (\r\n        <>\r\n            <Modal show={show} onHide={handleClose} size='xl' backdrop=\"static\"\r\n                className='modal-add-user'>\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>View a user</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <form className=\"row g-3\">\r\n                        <div className=\"col-md-6\">\r\n                            <label className=\"form-label\" >Email</label>\r\n                            <input type=\"email\" className=\"form-control\" value={email} disabled/>\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <label className=\"form-label\" >Password</label>\r\n                            <input type=\"password\" className=\"form-control\" value={password} disabled/>\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <label className=\"form-label\" >Username</label>\r\n                            <input value={userName} disabled\r\n                                type=\"text\" className=\"form-control\" placeholder=\"Apartment, studio, or floor\" />\r\n                        </div>\r\n                        <div className=\"col-md-4\">\r\n                            <label className=\"form-label\">Role</label>\r\n                            <select className=\"form-select\" value={role}  disabled>\r\n                                <option selected value=\"USER\">USER</option>\r\n                                <option value=\"ADMIN\">ADMIN</option>\r\n                            </select>\r\n                        </div>\r\n                        <div className='col-md-12'>\r\n                            <label className=\"form-label label-upload\" htmlFor='labelUpload'>\r\n                                <HiOutlineViewGridAdd />Upload Image </label>\r\n                            <input type='file' hidden id='labelUpload' disabled\r\n                               ></input>\r\n                        </div>\r\n                        <div className='col-md-12 img-preview'>\r\n                            {previewImg ? <img src={previewImg} />\r\n                                : <span>Preview Image</span>}\r\n                        </div>\r\n                    </form>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ModalViewUser","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Admin\\Content\\ModalDeleteUser.js",["413","414"],[],"import React, { useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport { deleteUser } from '../../../Services/apiService';\r\nimport { toast } from \"react-toastify\";\r\nimport { Toast } from 'bootstrap';\r\nconst ModalDeleteUser = (props) => {\r\n    const { show, setShow, dataDelete } = props;\r\n    const handleClose = () => setShow(false);\r\n    const handleConfirmDele = async () => {\r\n        let res = await deleteUser(dataDelete.id);\r\n        if (res && res.EC === 0) {\r\n            toast.success(res.EM);\r\n            handleClose();\r\n            // await props.fetchListUser();\r\n            props.setCurrentPage(1);\r\n            await props.fetchListUserWithPaginate(1);\r\n        }\r\n        if (res && res.EC !== 0) {\r\n            toast.error(res.EM);\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <Modal show={show} onHide={handleClose} backdrop=\"static\">\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Confirm delete a user ?</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>Are you sure to delete this user, email: <b>{dataDelete && dataDelete.email ? dataDelete.email : \"\"}</b> ?</Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={() => handleConfirmDele()} >\r\n                        Confirm\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ModalDeleteUser","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Admin\\Content\\TableUserPaginate.js",["415","416"],[],"import ReactPaginate from 'react-paginate';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nconst TableUserPaginate = (props) => {\r\n    const { listUsers, pageCount } = props;\r\n    //const pageCount = Math.ceil(items.length / itemsPerPage);\r\n    const handlePageClick = (event) => {\r\n        props.fetchListUserWithPaginate(+event.selected+1);\r\n        props.setCurrentPage(event.selected+1);\r\n    };\r\n    return (\r\n        <>\r\n            <table className=\"table table-hover table-bordered\">\r\n                <thead>\r\n                    <tr>\r\n                        <th scope=\"col\">ID</th>\r\n                        <th scope=\"col\">username</th>\r\n                        <th scope=\"col\">Email</th>\r\n                        <th scope=\"col\">Role</th>\r\n                        <th>Actions</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {listUsers && listUsers.length > 0 &&\r\n                        listUsers.map((item, index) => {\r\n                            return (\r\n                                <tr key={`table-users-${index}`}>\r\n                                    <td>{item.id}</td>\r\n                                    <td>{item.username}</td>\r\n                                    <td>{item.email}</td>\r\n                                    <td>@{item.role}</td>\r\n                                    <td>\r\n                                        <button className=\"btn btn-info\"\r\n                                            onClick={() => props.handleViewUser(item)}>View</button>\r\n                                        <button className=\"btn btn-warning mx-3\"\r\n                                            onClick={() => props.handleClickUpdateUser(item)}>Update</button>\r\n                                        <button className=\"btn btn-danger\"\r\n                                            onClick={() => props.handleDeleteUser(item)}>Delete</button>\r\n                                    </td>\r\n\r\n                                </tr>\r\n                            )\r\n                        })}\r\n                    {listUsers && listUsers.length === 0 &&\r\n                        <tr >\r\n                            <td colSpan={'4'}>Not found data</td>\r\n                        </tr>}\r\n\r\n\r\n                </tbody>\r\n            </table>\r\n            <div className='user-pagination d-flex justify-content-center'>\r\n            <ReactPaginate\r\n                nextLabel=\"Next >\"\r\n                onPageChange={handlePageClick}\r\n                pageRangeDisplayed={3}\r\n                marginPagesDisplayed={2}\r\n                pageCount={pageCount}\r\n                previousLabel=\"< Prev\"\r\n                pageClassName=\"page-item\"\r\n                pageLinkClassName=\"page-link\"\r\n                previousClassName=\"page-item\"\r\n                previousLinkClassName=\"page-link\"\r\n                nextClassName=\"page-item\"\r\n                nextLinkClassName=\"page-link\"\r\n                breakLabel=\"...\"\r\n                breakClassName=\"page-item\"\r\n                breakLinkClassName=\"page-link\"\r\n                containerClassName=\"pagination\"\r\n                activeClassName=\"active\"\r\n                renderOnZeroPageCount={null}\r\n                forcePage={props.currentPage-1}\r\n            />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TableUserPaginate","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Auth\\Login.js",[],[],"D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\Layout.js",["417"],[],"import React from 'react';\r\nimport { Route, Routes } from \"react-router-dom\";\r\nimport HomePage from './component/Home/HomePage';\r\nimport ManageUser from './component/Admin/Content/ManageUser';\r\nimport Dashboard from './component/Admin/Content/DashBoard';\r\nimport Login from './component/Auth/Login';\r\nimport Register from './component/Auth/Register'\r\nimport User from './component/User/User';\r\nimport Admin from './component/Admin/Admin';\r\nimport App from './App';\r\nimport { ToastContainer} from \"react-toastify\";\r\nimport 'react-toastify/dist/ReactToastify.css'\r\nimport ListQuiz from './component/User/ListQuiz';\r\nimport DetailQuiz from './component/User/DetailQuiz';\r\nimport ManageQuiz from './component/Admin/Content/Quiz/ManageQuiz';\r\nimport Questions from './component/Admin/Content/Question/Question';\r\nimport PrivateRoute from './Route/PrivateRoute';\r\nimport  {Suspense} from 'react';\r\nconst Notfound = () => {\r\n    return(\r\n        <div className='container mt-3 d-flex justify-content-center alert alert-danger '>404.Not found data with your current URL</div>\r\n    )\r\n}\r\nconst Layout = (props) => {\r\n    return (\r\n        <Suspense fallback={<div>Loading...</div>}>\r\n        <Routes>\r\n            <Route path=\"/\" element={<App />}>\r\n                <Route index element={<HomePage />} />\r\n                <Route path=\"users\" element={\r\n                <PrivateRoute>\r\n                    <ListQuiz />\r\n                </PrivateRoute>\r\n}/>\r\n            </Route>\r\n            <Route path=\"/quiz/:id\" element={<DetailQuiz />} />\r\n                <Route path=\"/admins\" element={\r\n                <PrivateRoute>\r\n                    <Admin />\r\n                </PrivateRoute>} >\r\n                <Route index element={<Dashboard />} />\r\n                <Route path=\"manage-users\" element={<ManageUser />} />\r\n                <Route path=\"manage-quizzes\" element={<ManageQuiz />} />\r\n                <Route path=\"manage-questions\" element={<Questions />} />\r\n            </Route>\r\n            <Route path=\"/login\" element={<Login />} />\r\n            <Route path = '/register' element={<Register/>} />\r\n            <Route path='/test' element={<PrivateRoute />} />\r\n            <Route path='*' element={<Notfound/>}/>\r\n        </Routes>\r\n            <ToastContainer\r\n                position=\"top-left\"\r\n                autoClose={3000}\r\n                hideProgressBar={false}\r\n                newestOnTop={false}\r\n                closeOnClick\r\n                rtl={false}\r\n                pauseOnFocusLoss\r\n                draggable\r\n                pauseOnHover\r\n            >\r\n            </ToastContainer>\r\n        </Suspense>\r\n    )\r\n}\r\n\r\nexport default Layout;","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Auth\\Register.js",[],[],"D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\redux\\reducer\\userReducer.js",[],[],"D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\User\\ListQuiz.js",[],[],"D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\User\\DetailQuiz.js",["418","419","420"],[],"import { useEffect } from \"react\";\r\nimport { useParams,useLocation } from \"react-router-dom\"\r\nimport { getDataQuiz, postSubmitQuiz } from \"../../Services/apiService\";\r\nimport _, { cloneDeep } from \"lodash\"\r\nimport './DetailQuiz.scss'\r\nimport Question from \"./Question\";\r\nimport { useState } from \"react\";\r\nimport ModalResult from \"./ModalResult\";\r\nimport RightContent from \"./QuizContent/RightContent\";\r\nconst DetailQuiz = (props) => {\r\n    const params = useParams();\r\n    const location = useLocation();\r\n    const quizId = params.id;\r\n    const [dataQuiz, setDataQuiz] = useState([])\r\n    const [index, setIndex] = useState(0);\r\n\r\n    const [isShowModal,setIsShowModal] = useState(false)\r\n    const [dataModal,setDataModal] = useState({})\r\n    const fetchQuestion = async() => {\r\n        let res = await getDataQuiz(quizId)\r\n        if (res && res.EC === 0){\r\n            let raw = res.DT;\r\n            let data = _.chain(raw)\r\n                // Group the elements of Array based on `color` property\r\n                .groupBy(\"id\")\r\n                // `key` is group's name (color), `value` is the array of objects\r\n                .map((value, key) => {\r\n                    let answers = [];\r\n                    let questionDescription, image = null;\r\n                    value.forEach((item,index)=>{\r\n                        if (index === 0){\r\n                            questionDescription = item.description;\r\n                            image = item.image;\r\n                        }\r\n                        item.answers.isSelected = false;\r\n                        answers.push(item.answers);\r\n                    })\r\n                    answers = _.orderBy(answers, ['id'],['asc'])\r\n                    return { questionId: key, answers, questionDescription, image }\r\n        })\r\n                .value()\r\n            setDataQuiz(data);\r\n        }\r\n    }\r\n\r\n    const handlePrev=()=>{\r\n        if (index-1 < 0) return;\r\n        setIndex(index - 1)\r\n    }\r\n    const handleNext = () => {\r\n        if(dataQuiz && dataQuiz.length > index+1)\r\n          setIndex(index+1)\r\n    }\r\n    const handleFinish = async () => {\r\n        let payload = {quizId:+quizId,answers:[]};\r\n        let answers = [];\r\n        if (dataQuiz && dataQuiz.length > 0){\r\n            dataQuiz.forEach(item => {\r\n                \r\n                let questionId = item.questionId;\r\n                let userAnswerId = [];\r\n                item.answers.forEach(a => {\r\n                    if (a.isSelected){\r\n                        userAnswerId.push(a.id)\r\n                    }\r\n                })\r\n                answers.push({\r\n                    questionId: +questionId,\r\n                    userAnswerId: userAnswerId\r\n                })\r\n            })\r\n            payload.answers = answers;\r\n            //submit api\r\n            let res = await postSubmitQuiz(payload);\r\n            console.log(\"check res: \", res);\r\n            if (res && res.EC === 0){\r\n                setDataModal({\r\n                    countCorrect: res.DT.countCorrect,\r\n                    countTotal: res.DT.countTotal,\r\n                    quizData: res.DT.quizData\r\n                })\r\n                setIsShowModal(true);\r\n            }else{\r\n                alert(\"Something wrong ...\")\r\n            }\r\n        }\r\n\r\n    }\r\n    const handleCheckBox = (answerId, questionId) => {\r\n        let dataQuizClone = _.cloneDeep(dataQuiz);\r\n        console.log(\"dataquiz: \", dataQuizClone);\r\n        let question = dataQuizClone.find(item => +item.questionId === +questionId);\r\n        if(question && question.answers){\r\n           question.answers.map(item => {\r\n            if (+item.id === +answerId){\r\n                item.isSelected = !item.isSelected;\r\n            }\r\n            return item;\r\n           })\r\n        }\r\n        let index = dataQuizClone.findIndex(item => +item.questionId === +questionId)\r\n        if(index > -1){\r\n            dataQuizClone[index] = question;\r\n            setDataQuiz(dataQuizClone)\r\n        }\r\n        \r\n    }\r\n    useEffect(()=>{\r\n        fetchQuestion();\r\n    },[quizId])\r\n    return (\r\n        <div className=\"detail-quiz-container\">\r\n           <div className=\"left-content\">\r\n                <div className=\"title\">\r\n                    Quiz {quizId}: {location?.state?.quizTitle}\r\n                </div>\r\n                <hr />\r\n                <div className=\"q-body\">\r\n                    <img />\r\n                </div>\r\n                <div className=\"q-content\">\r\n                    <Question index={index}\r\n                    handleCheckBox = {handleCheckBox}\r\n                    data={dataQuiz && dataQuiz.length >0 ? dataQuiz[index]: []}/>\r\n                </div>\r\n                <div className=\"footer\">\r\n                    <button className=\"btn btn-secondary ml-3\"\r\n                    onClick={()=>handlePrev()}>PREV</button>\r\n                    <button className=\"btn btn-primary \"\r\n                    onClick={()=>handleNext()}>NEXT</button>\r\n                    <button className=\"btn btn-warning \"\r\n                    onClick={() => handleFinish()}>FINISH</button>\r\n                </div>\r\n           </div>\r\n           <div className=\"right-content\">\r\n                <RightContent \r\n                setIndex = {setIndex}\r\n                handleFinish={handleFinish}\r\n                dataQuiz = {dataQuiz}/>\r\n           </div>\r\n           <ModalResult \r\n           show={isShowModal}\r\n           setShow = {setIsShowModal}\r\n            dataModal={dataModal }/>\r\n        </div>\r\n    )\r\n}\r\nexport default DetailQuiz","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\User\\Question.js",["421"],[],"import _ from \"lodash\";\r\nimport { useState } from \"react\";\r\nimport Lightbox from \"react-awesome-lightbox\";\r\nconst Question = (props) => {\r\n    const { data, index } = props;\r\n    const [isPreviewImage, setIsPreviewImage] = useState(false);\r\n    if (_.isEmpty(data)) {\r\n        return (<></>)\r\n    }\r\n    \r\n    const handleCheckedbox =(Event,aId, qId)=>{\r\n        props.handleCheckBox(aId, qId);\r\n    }\r\n    return (\r\n        <>\r\n            {\r\n            data.image ? \r\n            <div className=\"q-image\">\r\n                <img src={`data: image/jpeg;base64,${data.image}`} onClick={() => setIsPreviewImage(true)} style={{cursor: 'pointer'}}/>\r\n                       {isPreviewImage === true &&\r\n                            <Lightbox image={`data: image/jpeg;base64,${data.image}`}\r\n                                title={\"Question Image\"}\r\n                                onClose={() => setIsPreviewImage(false)}>\r\n                            </Lightbox>}\r\n            </div>\r\n                : <div className=\"q-image\"></div>\r\n            }\r\n            <div className=\"question\">Question {index + 1}: {data.questionDescription} ?</div>\r\n            <div className=\"answer\">\r\n                {data.answers && data.answers.length > 0 &&\r\n                    data.answers.map((a, index) => {\r\n                        return (\r\n                            <div key={`answer-${index}`}\r\n                                className=\"A-child\">\r\n                                <div className=\"form-check\">\r\n                                    <input className=\"form-check-input\" type=\"checkbox\" \r\n                                    checked = {a.isSelected}\r\n                                        onChange={(Event) => handleCheckedbox(Event, a.id, data.questionId)}/>\r\n                                    <label className=\"form-check-label\" >\r\n                                        {a.description}\r\n                                    </label>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    })}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Question;","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\User\\ModalResult.js",["422"],[],"import React, { useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\n\r\nconst ModalResult = (props) => {\r\n    const { show, setShow, dataModal } = props;\r\n    const handleClose = () => setShow(false);\r\n    \r\n    return (\r\n        <>\r\n            <Modal show={show} onHide={handleClose} backdrop=\"static\">\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Your Result...</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>\r\n                    <div>Total Questions: <b>{dataModal.countTotal}</b></div>\r\n                    <div>Total Correct Answers: <b>{dataModal.countCorrect}</b></div>\r\n                </Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Show ansers\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={ handleClose} >\r\n                        Close\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ModalResult","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Admin\\Content\\Quiz\\ManageQuiz.js",["423"],[],"import { useState, useEffect } from 'react'\r\nimport './ManageQuiz.scss'\r\nimport Select from 'react-select'\r\nimport { postCreateNewQuiz } from '../../../../Services/apiService'\r\nimport { toast } from \"react-toastify\";\r\nimport  Accordion  from 'react-bootstrap/Accordion';\r\nimport TableQuiz from './TableQuiz';\r\nimport QuizQA from './QuizQA';\r\nimport AssignQuiz from './AssignQuiz';\r\n\r\nconst options = [\r\n    {value: 'EASY', label:'EASY'},\r\n    { value: 'MEDIUM', label: 'MEDIUM' },\r\n    { value: 'HARD', label: 'HARD' },\r\n]\r\nconst ManageQuiz = (props) => {\r\n    \r\n    const [name,setName] = useState('');\r\n    const [description,setDescription] = useState('');\r\n    const [type,setType] = useState('EASY');\r\n    const [image,setImage] = useState(null);\r\n    \r\n    const handleSubmitQuiz = async () => {\r\n        let res = await postCreateNewQuiz(description, name, type?.value, image);\r\n        if (res && res.EC === 0){\r\n            toast.success(res.EM)\r\n            setName('');\r\n            setDescription('')\r\n            setImage(null)\r\n        }\r\n        else{\r\n            toast.error(res.EM)\r\n        }\r\n    }\r\n    const handleChangeFile = (Event) => {\r\n        if (Event && Event.target && Event.target.files[0]) {\r\n            setImage(Event.target.files[0])\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"quiz-container\">\r\n            <Accordion defaultActiveKey=\"0\">\r\n                <Accordion.Item eventKey=\"0\">\r\n                    <Accordion.Header>\r\n                        Manage Quizzes\r\n                    </Accordion.Header>\r\n                    <Accordion.Body>\r\n                        <div className=\"add-new\">\r\n                            <fieldset className=\"border rounded-3 p-3\">\r\n                                <legend className=\"float-none w-auto px-3\">Add new quiz:</legend>\r\n                                <div className=\"form-floating mb-3\">\r\n                                    <input type=\"text\" className=\"form-control\" placeholder='your quiz name'\r\n                                        value={name} onChange={(Event) => setName(Event.target.value)} />\r\n                                    <label for=\"floatingInput\">Name</label>\r\n                                </div>\r\n                                <div className=\"form-floating\">\r\n                                    <input type=\"text\" className=\"form-control\" placeholder='description'\r\n                                        value={description} onChange={(Event) => setDescription(Event.target.value)} />\r\n                                    <label for=\"floatingPassword\">Description</label>\r\n                                </div>\r\n                                <div className='my-3'>\r\n                                    <Select\r\n                                        value={type}\r\n                                        defaultValue={type}\r\n                                        onChange={setType}\r\n                                        options={options} />\r\n                                </div>\r\n                                <div className='more-actions form-group'>\r\n                                    <label className='mb-1'>Upload Image</label>\r\n                                    <input type='file' className='form-control'\r\n                                        onChange={(Event) => handleChangeFile(Event)}></input>\r\n                                </div>\r\n                                <div className='mt-3'>\r\n                                    <button className='btn btn-warning'\r\n                                        onClick={() => handleSubmitQuiz()}>Save</button>\r\n                                </div>\r\n                            </fieldset>\r\n                        </div>\r\n                        <div className=\"list-detail\">\r\n                            <TableQuiz/>\r\n                        </div>\r\n                    </Accordion.Body>\r\n                </Accordion.Item>\r\n\r\n\r\n                <Accordion.Item eventKey=\"1\">\r\n                    <Accordion.Header>\r\n                        Update Q/A Quizzes\r\n                    </Accordion.Header>\r\n                    <Accordion.Body>\r\n                        <QuizQA />\r\n                    </Accordion.Body>\r\n                </Accordion.Item>\r\n                <Accordion.Item eventKey=\"2\">\r\n                    <Accordion.Header>\r\n                       Assign to Users\r\n                    </Accordion.Header>\r\n                    <Accordion.Body>\r\n                        <AssignQuiz />\r\n                    </Accordion.Body>\r\n                </Accordion.Item>\r\n            </Accordion>\r\n        </div>\r\n    )\r\n}\r\nexport default ManageQuiz","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Admin\\Content\\Quiz\\TableQuiz.js",[],[],"D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Admin\\Content\\Quiz\\ModalEditQuiz.js",["424","425","426","427"],[],"import React, { useEffect, useState } from \"react\";\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Select from 'react-select'\r\nimport { editQuiz } from \"../../../../Services/apiService\";\r\nimport { HiOutlineViewGridAdd } from 'react-icons/hi';\r\nimport _ from 'lodash'\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst ModalEditQuiz = (props) => {\r\n    const { show, setShow, dataEdit } = props;\r\n    const [name, setName] = useState(''); \r\n    const [description,setDescription] = useState('');\r\n    const [difficulty, setDifficulty] = useState('');\r\n    const [quizImage, setQuizImage] = useState('');\r\n    const [previewImg, setPreviewImg] = useState('')\r\n    const handleClose = () => {\r\n        setShow(false);\r\n        setName(''); setDifficulty(''); setQuizImage(''); setPreviewImg(\"\"); setDescription(\"\")\r\n        props.resetData();\r\n    }\r\n    const handleSaveEditQuiz = async () => {\r\n        let res = await editQuiz(dataEdit.id, description, name, difficulty, previewImg);\r\n        if (res && res.EC === 0) {\r\n            toast.success(res.EM);\r\n            handleClose();\r\n            await props.fetchQuiz();\r\n        }\r\n        if (res && res.EC !== 0) {\r\n            toast.error(res.EM);\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        if (!_.isEmpty(dataEdit)) {\r\n            setName(dataEdit.name);\r\n            setDifficulty(dataEdit.difficulty);\r\n            setDescription(dataEdit.description);\r\n            if (dataEdit.image) {\r\n                setPreviewImg(`data:image/jpeg;base64,${dataEdit.image}`)\r\n            }\r\n        }\r\n    }, [props.dataEdit])\r\n    const hanleUploadImage = (Event) => {\r\n        if (Event && Event.target && Event.target.files[0]) {\r\n            setPreviewImg(URL.createObjectURL(Event.target.files[0]));\r\n            setQuizImage(Event.target.files[0])\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n        <Modal show={show} onHide={handleClose} size='xl' backdrop=\"static\"\r\n            className='modal-add-quiz'>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Edit Quiz</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <form className=\"row g-3\">\r\n                 <div className=\"col-md-6\">\r\n                    <label className=\"form-label\" >Name:</label>\r\n                    <input type=\"text\" className=\"form-control\" value={name}\r\n                        onChange={(Event) => setName(Event.target.value)} />\r\n                 </div>\r\n                    <div className=\"col-md-6\">\r\n                    <label className=\"form-label\" >Description:</label>\r\n                    <input type=\"text\" className=\"form-control\" value={description}\r\n                            onChange={(Event) => setDescription(Event.target.value)} />\r\n                    </div>\r\n                        <div className='col-md-4'>\r\n                            <select className=\"form-select\" value={difficulty} \r\n                            onChange={(Event) => setDifficulty(Event.target.value)}>\r\n                                <option selected value=\"EASY\">EASY</option>\r\n                                <option value=\"MEDIUM\">MEDIUM</option>\r\n                                <option value=\"HARD\">HARD</option>\r\n                            </select>\r\n                    </div>\r\n                        <div className='col-md-12'>\r\n                            <label className=\"form-label label-upload\" htmlFor='labelUpload'>\r\n                                <HiOutlineViewGridAdd />Upload Image </label>\r\n                            <input type='file' hidden id='labelUpload'\r\n                                onChange={(Event) => hanleUploadImage(Event)}></input>\r\n                        </div>\r\n                        <div className='col-md-12 img-preview'>\r\n                            {previewImg ? <img src={previewImg} />\r\n                                : <span>Preview Image</span>}\r\n                        </div>\r\n                    </form>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                    <Button onClick={() => handleClose()}>\r\n                    Close\r\n                </Button>\r\n                    <Button onClick={() => handleSaveEditQuiz()}>\r\n                    Save Changes\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n        </>\r\n    )\r\n}\r\nexport default ModalEditQuiz;","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Admin\\Content\\Quiz\\ModalDeleteQuiz.js",["428"],[],"import React, { useState } from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport { deleteQuiz } from '../../../../Services/apiService';\r\nimport { toast } from \"react-toastify\";\r\n\r\nconst ModalDeleteQuiz = (props) => {\r\n    const { show, setShow, dataDeleteQuiz } = props;\r\n    const handleClose = () => setShow(false);\r\n    const handleConfirmDele = async () => {\r\n        let res = await deleteQuiz(dataDeleteQuiz.id);\r\n        if (res && res.EC === 0) {\r\n            toast.success(res.EM);\r\n            handleClose();\r\n            await props.fetchQuiz()\r\n        }\r\n        if (res && res.EC !== 0) {\r\n            toast.error(res.EM);\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            <Modal show={show} onHide={handleClose} backdrop=\"static\">\r\n                <Modal.Header closeButton>\r\n                    <Modal.Title>Confirm delete a quiz ?</Modal.Title>\r\n                </Modal.Header>\r\n                <Modal.Body>Are you sure to delete this quiz ?</Modal.Body>\r\n                <Modal.Footer>\r\n                    <Button variant=\"secondary\" onClick={handleClose}>\r\n                        Cancel\r\n                    </Button>\r\n                    <Button variant=\"primary\" onClick={() => handleConfirmDele()} >\r\n                        Confirm\r\n                    </Button>\r\n                </Modal.Footer>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default ModalDeleteQuiz","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Admin\\Content\\Question\\Question.js",["429","430"],[],"import { useEffect, useState } from \"react\"\r\nimport Select from \"react-select\"\r\nimport './Question.scss'\r\nimport { TbHeartPlus } from \"react-icons/tb\"\r\nimport { BiCheckboxMinus } from \"react-icons/bi\"\r\nimport { IoIosAdd } from \"react-icons/io\"\r\nimport { AiFillMinusCircle } from \"react-icons/ai\"\r\nimport { RiImageAddFill } from \"react-icons/ri\"\r\nimport { v4 as uuidv4, validate } from 'uuid'\r\nimport { getAllQuizAdmin, postNewQuestionForQuiz, postAnswerForQuestion } from \"../../../../Services/apiService\";\r\nimport _ from \"lodash\"\r\nimport Lightbox from \"react-awesome-lightbox\";\r\nimport { toast } from \"react-toastify\"\r\nconst Questions = (props) => {\r\n    const initSate = (\r\n        [\r\n        {\r\n            id: uuidv4(),\r\n            description: '',\r\n            image: '',\r\n            imageName: '',\r\n            answers: [\r\n                {\r\n                    id: uuidv4(),\r\n                    description: '',\r\n                    isCorrect: false\r\n                },\r\n            ]\r\n        },\r\n        ])\r\n    const [selectedQuiz, setSelectedQuiz] = useState({});\r\n    const [questions, setQuestions] = useState(initSate)\r\n    const [prewImage, setPrewImage] = useState(false);\r\n    const [listQuiz, setListQuiz] = useState([]);\r\n    const fetchQuiz = async () => {\r\n        let res = await getAllQuizAdmin();\r\n        if (res && res.EC === 0) {\r\n            let newQuiz = res.DT.map(item => {\r\n                return {\r\n                    value: item.id,\r\n                    label: `${item.id}-${item.description}`\r\n                }\r\n            })\r\n            setListQuiz(newQuiz);\r\n        }\r\n    }\r\n    useEffect(()=>{\r\n        fetchQuiz();\r\n    }, [])\r\n    const [dataPreviewImage, setDataPreviewImage] = useState({\r\n        url: '',\r\n        title: ''\r\n    })\r\n    const handleSubmitQuestion = async () => {\r\n        //todo\r\n        if (_.isEmpty(selectedQuiz)){\r\n            toast.error(\"Please select quiz\");\r\n            return;\r\n        }\r\n        //validate question\r\n        let isValidQ = true; let indexQ;\r\n        for (let i = 0; i < questions.length; i++){\r\n            if (!questions[i].description){\r\n                isValidQ = false;\r\n                indexQ = i;\r\n                break;\r\n            }\r\n        }\r\n        if (isValidQ === false) {\r\n            toast.error(`Not empty description in question ${indexQ+1}`);\r\n            return;\r\n        }\r\n        //validate answer\r\n        let isValid = true; let indexAnswer; let indexQuestion;\r\n        for (let i = 0; i < questions.length; i++){\r\n            let checkedAnswer = false;\r\n            for (let j =0; j < questions[i].answers.length;j++){\r\n                if (!questions[i].answers[j].description){\r\n                    isValid = false;\r\n                    indexAnswer = j;\r\n                    break;\r\n                }\r\n                if (questions[i].answers[j].isCorrect === true) {\r\n                    checkedAnswer = true;\r\n                }\r\n            }\r\n            indexQuestion = i;\r\n            if (checkedAnswer === false) {\r\n                toast.error(\"Please fill checked box\");\r\n                return;\r\n            }\r\n            if (isValid === false) break;\r\n            }\r\n        if (isValid === false) {\r\n            toast.error(`Please fill answer${indexAnswer + 1} in question${indexQuestion + 1}`);\r\n            return;\r\n        }\r\n        \r\n            \r\n       for (const question of questions){\r\n            const q = await postNewQuestionForQuiz(+selectedQuiz.value, question.description, question.image);\r\n           for (const answer of question.answers){\r\n                 await postAnswerForQuestion(answer.description,answer.isCorrect,q.DT.id);\r\n            }\r\n        };\r\n        toast.success(\"Create success !\");\r\n        setQuestions(initSate);\r\n    }\r\n    const handleAddRemoveQuestions = (type, id) => {\r\n        if (type === 'ADD') {\r\n            const newQuestion = {\r\n                id: uuidv4(),\r\n                description: '',\r\n                image: '',\r\n                imageName: '',\r\n                answers: [\r\n                    {\r\n                        id: uuidv4(),\r\n                        description: '',\r\n                        isCorrect: false\r\n                    },\r\n\r\n                ]\r\n            }\r\n            setQuestions([...questions, newQuestion]);\r\n        }\r\n\r\n        if (type === 'REMOVE') {\r\n            let questionClone = _.cloneDeep(questions);\r\n            questionClone = questionClone.filter(item => item.id !== id)\r\n            setQuestions(questionClone);\r\n        }\r\n    }\r\n    const handleAddRemoveAnswer = (type, questionId, id) => {\r\n        let questionsClone = _.cloneDeep(questions);\r\n        if (type === 'ADD') {\r\n            const newAnswer =\r\n            {\r\n                id: uuidv4(),\r\n                description: '',\r\n                isCorrect: false\r\n            }\r\n            let index = questionsClone.findIndex(item => item.id === questionId);\r\n            questionsClone[index].answers.push(newAnswer);\r\n            setQuestions(questionsClone);\r\n        }\r\n\r\n        if (type === 'REMOVE') {\r\n            let index = questionsClone.findIndex(item => item.id === questionId);\r\n            questionsClone[index].answers = questionsClone[index].answers.filter(item => item.id !== id)\r\n            setQuestions(questionsClone);\r\n        }\r\n    }\r\n    const handleOnChange = (type, questionId, value) => {\r\n        if (type === 'QUESTION') {\r\n            let questionClone = _.cloneDeep(questions);\r\n            let index = questionClone.findIndex(item => item.id === questionId)\r\n            if (index > -1) {\r\n                questionClone[index].description = value;\r\n                setQuestions(questionClone);\r\n            }\r\n        }\r\n    }\r\n    const handleOnChangeFileQuestion = (questionId, Event) => {\r\n        let questionClone = _.cloneDeep(questions);\r\n        let index = questionClone.findIndex(item => item.id === questionId);\r\n        if (index > - 1 && Event && Event.target && Event.target.files && Event.target.files[0]){\r\n            questionClone[index].image = Event.target.files[0];\r\n            questionClone[index].imageName = Event.target.files[0].name;\r\n            console.log('file image: ', questionClone[index]);\r\n            setQuestions(questionClone);\r\n\r\n        }\r\n    }\r\n    const handleOnChangeAnswer = (type,questionId, answerId, value) => {\r\n        let questionClone = _.cloneDeep(questions);\r\n        let index = questionClone.findIndex(item => item.id === questionId);\r\n        if (index > - 1) {\r\n            questionClone[index].answers = questionClone[index].answers.map((answer, index)=>{\r\n                if (answer.id === answerId){\r\n                    if (type==='CHECKED'){\r\n                        answer.isCorrect = value;\r\n                    }\r\n                    if (type === 'INPUT'){\r\n                        answer.description = value;\r\n                    }\r\n                }\r\n                return answer;\r\n            })\r\n            setQuestions(questionClone);\r\n\r\n        }\r\n    }\r\n    const handleOnClickImage = (questionId) => {\r\n        let questionClone = _.cloneDeep(questions);\r\n        let index = questionClone.findIndex(item => item.id === questionId);\r\n        if (index > -1) {\r\n           setDataPreviewImage({\r\n               url: URL.createObjectURL(questionClone[index].image),\r\n               title: questionClone[index].imageName\r\n           })\r\n            setPrewImage(true);\r\n        }\r\n    }\r\n    return (\r\n        <div className=\"question-container\">\r\n            <div className=\"title\">\r\n                Mange Questions\r\n            </div>\r\n            <hr />\r\n            <div className=\"add-new-question\">\r\n                <div className=\"col-6 form-group\">\r\n                    <label className=\"mb-2\">Select Quiz:</label>\r\n                    <Select\r\n                        value={selectedQuiz}\r\n                        defaultValue={selectedQuiz}\r\n                        onChange={setSelectedQuiz}\r\n                        options={listQuiz}\r\n                    />\r\n                </div>\r\n                <div className=\"mt-3 mb-2\">Add questions:</div>\r\n                {\r\n                    questions && questions.length > 0 && questions.map((question, index) => {\r\n                        return (\r\n                            <div key = {question.id } className=\"q-main mb-5\">\r\n                                <div className=\"question-content\">\r\n                                    <div className=\"form-floating description\">\r\n                                        <input type=\"text\" className=\"form-control\"\r\n                                            placeholder=\"name@example.com\"\r\n                                            value={question.description}\r\n                                            onChange={(event) => handleOnChange('QUESTION', question.id, event.target.value)} />\r\n                                        <label>Question {index + 1} description</label>\r\n                                    </div>\r\n                                    <div className=\"group-upload\">\r\n                                        <label className=\"label-upload\" htmlFor={`${question.id}`}><RiImageAddFill  /></label>\r\n                                        <input type={'file'} hidden id = {`${question.id}`} \r\n                                        onChange={(Event) => handleOnChangeFileQuestion(question.id, Event)}></input>\r\n                                        <span>{question.imageName ? \r\n                                        <span style={{cursor:'pointer'}} onClick={()=> handleOnClickImage(question.id)}>{question.imageName}</span> : \r\n                                        'No file uploaded'}</span>\r\n                                    </div>\r\n                                    <div className=\"btn-add\">\r\n\r\n                                        <span onClick={() => handleAddRemoveQuestions('ADD', '')}>\r\n                                            <IoIosAdd className=\"icon-add\" /></span>\r\n                                        {questions.length > 1 &&\r\n                                            <span onClick={() => handleAddRemoveQuestions('REMOVE', question.id)}>\r\n                                                <AiFillMinusCircle className=\"icon-remove\" /></span>\r\n                                        }\r\n\r\n                                    </div>\r\n                                </div>\r\n                                {\r\n                                    question.answers && question.answers.length > 0\r\n                                    && question.answers.map((answer, index) => {\r\n                                        return (\r\n                                            <div className=\"answers-content\" key={answer.id}>\r\n                                                <input className=\"form-check-input iscorrected\" type=\"checkbox\" \r\n                                                checked={answer.isCorrect}\r\n                                                onChange={(Event) => handleOnChangeAnswer('CHECKED', question.id, answer.id,Event.target.checked)}/>\r\n                                                <div className=\"form-floating col-6 description\">\r\n                                                    <input type=\"type\" className=\"form-control answer-name\" \r\n                                                        placeholder=\"answer 1\" value={answer.description} \r\n                                                        onChange={(Event) => handleOnChangeAnswer('INPUT',question.id,answer.id,Event.target.value)}/>\r\n                                                    <label>Answer {index + 1}</label>\r\n                                                </div>\r\n                                                <div className=\"btn-group\">\r\n                                                    <span onClick={() => handleAddRemoveAnswer('ADD', question.id)}>\r\n                                                        <IoIosAdd className=\"icon-add\" />\r\n                                                    </span>\r\n                                                    {question.answers.length > 1 &&\r\n                                                        <span\r\n                                                            onClick={() => handleAddRemoveAnswer('REMOVE', question.id, answer.id)}>\r\n                                                            <BiCheckboxMinus className=\"icon-remove\" />\r\n                                                        </span>\r\n                                                    }\r\n\r\n                                                </div>\r\n\r\n                                            </div>\r\n                                        )\r\n                                    })\r\n                                }\r\n                               \r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n                {\r\n                    questions && questions.length > 0 && \r\n                    <button className=\"btn btn-primary\"\r\n                    onClick={()=>handleSubmitQuestion()}> Save questions</button>\r\n                }\r\n            </div>\r\n            {prewImage === true &&\r\n                <Lightbox image={dataPreviewImage.url}\r\n                    title={dataPreviewImage.title}\r\n                    onClose={() => setPrewImage(false)}>\r\n                </Lightbox>\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default Questions","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Admin\\Content\\Quiz\\QuizQA.js",["431","432","433","434"],[],"import { useEffect, useState } from \"react\"\r\nimport Select from \"react-select\"\r\nimport './QuizQA.scss'\r\nimport { BiCheckboxMinus } from \"react-icons/bi\"\r\nimport { IoIosAdd } from \"react-icons/io\"\r\nimport { AiFillMinusCircle } from \"react-icons/ai\"\r\nimport { RiImageAddFill } from \"react-icons/ri\"\r\nimport { v4 as uuidv4} from 'uuid'\r\nimport { getAllQuizAdmin, postNewQuestionForQuiz, postAnswerForQuestion, getQuizWithQa, postUpsertQA } from \"../../../../Services/apiService\";\r\nimport _ from \"lodash\"\r\nimport Lightbox from \"react-awesome-lightbox\";\r\nimport { toast } from \"react-toastify\"\r\nconst QuizQA = (props) => {\r\n    const initSate = (\r\n        [\r\n        {\r\n            id: uuidv4(),\r\n            description: '',\r\n            imageFile: '',\r\n            imageName: '',\r\n            answers: [\r\n                {\r\n                    id: uuidv4(),\r\n                    description: '',\r\n                    isCorrect: false\r\n                },\r\n            ]\r\n        },\r\n        ])\r\n    const [selectedQuiz, setSelectedQuiz] = useState({});\r\n    const [questions, setQuestions] = useState(initSate)\r\n    const [prewImage, setPrewImage] = useState(false);\r\n    const [listQuiz, setListQuiz] = useState([]);\r\n    const fetchQuiz = async () => {\r\n        let res = await getAllQuizAdmin();\r\n        if (res && res.EC === 0) {\r\n            let newQuiz = res.DT.map(item => {\r\n                return {\r\n                    value: item.id,\r\n                    label: `${item.id}-${item.description}`\r\n                }\r\n            })\r\n            setListQuiz(newQuiz);\r\n        }\r\n    }\r\n    useEffect(()=>{\r\n        fetchQuiz();\r\n    }, [])\r\n    const [dataPreviewImage, setDataPreviewImage] = useState({\r\n        url: '',\r\n        title: ''\r\n    })\r\n    const handleSubmitQuestion = async () => {\r\n        //todo\r\n        if (_.isEmpty(selectedQuiz)){\r\n            toast.error(\"Please select quiz\");\r\n            return;\r\n        }\r\n        //validate question\r\n        let isValidQ = true; let indexQ;\r\n        for (let i = 0; i < questions.length; i++){\r\n            if (!questions[i].description){\r\n                isValidQ = false;\r\n                indexQ = i;\r\n                break;\r\n            }\r\n        }\r\n        if (isValidQ === false) {\r\n            toast.error(`Not empty description in question ${indexQ+1}`);\r\n            return;\r\n        }\r\n        //validate answer\r\n        let isValid = true; let indexAnswer; let indexQuestion;\r\n        // for (let i = 0; i < questions.length; i++){\r\n        //     let checkedAnswer = false;\r\n        //     for (let j =0; j < questions[i].answers.length;j++){\r\n        //         if (!questions[i].answers[j].description){\r\n        //             isValid = false;\r\n        //             indexAnswer = j;\r\n        //             break;\r\n        //         }\r\n               \r\n        //         if (questions[i].answers[j].isCorrect === true){\r\n        //             checkedAnswer = true;\r\n        //         }\r\n        //     }\r\n        //     indexQuestion = i;\r\n        //     if (checkedAnswer === false) {\r\n        //         toast.error(\"Please fill checked box\");\r\n        //         return;\r\n        //     }\r\n        //     if (isValid === false) break;\r\n        // }\r\n        let questionsClone = _.cloneDeep(questions);\r\n        for (let i = 0; i < questionsClone.length; i++){\r\n            if (questionsClone[i].imageFile){\r\n                questions[i].imageFile =  toBase64(questionsClone[i].imageFile);\r\n            }\r\n        }\r\n        let res = await postUpsertQA({\r\n            quizId: selectedQuiz.value,\r\n            questions: questionsClone\r\n        });\r\n        if (res && res.EC === 0){\r\n            toast.success(res.EM);\r\n            fetchQuizWithQA();\r\n        }\r\n        const toBase64 = file => new Promise((resolve, reject) => {\r\n            const reader = new FileReader();\r\n            reader.readAsDataURL(file);\r\n            reader.onload = () => resolve(reader.result);\r\n            reader.onerror = reject;\r\n        });\r\n        if (isValid === false) {\r\n            toast.error(`Please fill answer${indexAnswer + 1} in question${indexQuestion + 1}`);\r\n            return;\r\n        }\r\n        toast.success(\"Create success !\");\r\n        setQuestions(initSate);\r\n    }\r\n    const handleAddRemoveQuestions = (type, id) => {\r\n        if (type === 'ADD') {\r\n            const newQuestion = {\r\n                id: uuidv4(),\r\n                description: '',\r\n                imageFile: '',\r\n                imageName: '',\r\n                answers: [\r\n                    {\r\n                        id: uuidv4(),\r\n                        description: '',\r\n                        isCorrect: false\r\n                    },\r\n\r\n                ]\r\n            }\r\n            setQuestions([...questions, newQuestion]);\r\n        }\r\n\r\n        if (type === 'REMOVE') {\r\n            let questionClone = _.cloneDeep(questions);\r\n            questionClone = questionClone.filter(item => item.id !== id)\r\n            setQuestions(questionClone);\r\n        }\r\n    }\r\n    const handleAddRemoveAnswer = (type, questionId, id) => {\r\n        let questionsClone = _.cloneDeep(questions);\r\n        if (type === 'ADD') {\r\n            const newAnswer =\r\n            {\r\n                id: uuidv4(),\r\n                description: '',\r\n                isCorrect: false\r\n            }\r\n            let index = questionsClone.findIndex(item => item.id === questionId);\r\n            questionsClone[index].answers.push(newAnswer);\r\n            setQuestions(questionsClone);\r\n        }\r\n\r\n        if (type === 'REMOVE') {\r\n            let index = questionsClone.findIndex(item => item.id === questionId);\r\n            questionsClone[index].answers = questionsClone[index].answers.filter(item => item.id !== id)\r\n            setQuestions(questionsClone);\r\n        }\r\n    }\r\n    const handleOnChange = (type, questionId, value) => {\r\n        if (type === 'QUESTION') {\r\n            let questionClone = _.cloneDeep(questions);\r\n            let index = questionClone.findIndex(item => item.id === questionId)\r\n            if (index > -1) {\r\n                questionClone[index].description = value;\r\n                setQuestions(questionClone);\r\n            }\r\n        }\r\n    }\r\n    const handleOnChangeFileQuestion = (questionId, Event) => {\r\n        let questionClone = _.cloneDeep(questions);\r\n        let index = questionClone.findIndex(item => item.id === questionId);\r\n        if (index > - 1 && Event && Event.target && Event.target.files && Event.target.files[0]){\r\n            questionClone[index].imageFile = Event.target.files[0];\r\n            questionClone[index].imageName = Event.target.files[0].name;\r\n            //.log('file image: ', questionClone[index]);\r\n            setQuestions(questionClone);\r\n\r\n        }\r\n    }\r\n    const handleOnChangeAnswer = (type,questionId, answerId, value) => {\r\n        let questionClone = _.cloneDeep(questions);\r\n        let index = questionClone.findIndex(item => item.id === questionId);\r\n        if (index > - 1) {\r\n            questionClone[index].answers = questionClone[index].answers.map((answer, index)=>{\r\n                if (answer.id === answerId){\r\n                    if (type==='CHECKED'){\r\n                        answer.isCorrect = value;\r\n                    }\r\n                    if (type === 'INPUT'){\r\n                        answer.description = value;\r\n                    }\r\n                }\r\n                return answer;\r\n            })\r\n            setQuestions(questionClone);\r\n\r\n        }\r\n    }\r\n    const handleOnClickImage = (questionId) => {\r\n        let questionClone = _.cloneDeep(questions);\r\n        let index = questionClone.findIndex(item => item.id === questionId);\r\n        if (index > -1) {\r\n           setDataPreviewImage({\r\n               url: URL.createObjectURL(questionClone[index].imageFile),\r\n               title: questionClone[index].imageName\r\n           })\r\n            setPrewImage(true);\r\n        }\r\n    }\r\n    const urltoFile = async (url, filename, mimeType) => {\r\n        if (url.startsWith('data:')) {\r\n            var arr = url.split(','),\r\n                mime = arr[0].match(/:(.*?);/)[1],\r\n                bstr = atob(arr[arr.length - 1]),\r\n                n = bstr.length,\r\n                u8arr = new Uint8Array(n);\r\n            while (n--) {\r\n                u8arr[n] = bstr.charCodeAt(n);\r\n            }\r\n            var file = new File([u8arr], filename, { type: mime || mimeType });\r\n            return Promise.resolve(file);\r\n        }\r\n        return fetch(url)\r\n            .then(res => res.arrayBuffer())\r\n            .then(buf => new File([buf], filename, { type: mimeType }));\r\n    }\r\n    const fetchQuizWithQA = async () => {\r\n        let res = await getQuizWithQa(selectedQuiz.value);\r\n        if (res && res.EC === 0){\r\n\r\n            let newQA = [];\r\n            for (let i = 0; i < res.DT.qa.length; i++){\r\n                let q = res.DT.qa[i];\r\n                if (q.imageFile){\r\n                    q.imageName = `Question-${q.id}.png`\r\n                    q.imageFile = await urltoFile(`data:image/png;base64,${q.imageFile}`,`Question-${q.id}`,'image/png')\r\n                }\r\n                newQA.push(q);\r\n            }\r\n            setQuestions(newQA);\r\n           \r\n        }\r\n       \r\n    }\r\n    useEffect(() => {\r\n        if (selectedQuiz && selectedQuiz.value){\r\n            fetchQuizWithQA();\r\n        }\r\n       \r\n    }, [selectedQuiz])\r\n    return (\r\n        <div className=\"question-container\">\r\n            <div className=\"add-new-question\">\r\n                <div className=\"col-6 form-group\">\r\n                    <label className=\"mb-2\">Select Quiz:</label>\r\n                    <Select\r\n                        value={selectedQuiz}\r\n                        defaultValue={selectedQuiz}\r\n                        onChange={setSelectedQuiz}\r\n                        options={listQuiz}\r\n                    />\r\n                </div>\r\n                <div className=\"mt-3 mb-2\">Add questions:</div>\r\n                {\r\n                    questions && questions.length > 0 && questions.map((question, index) => {\r\n                        return (\r\n                            <div key = {question.id } className=\"q-main mb-5\">\r\n                                <div className=\"question-content\">\r\n                                    <div className=\"form-floating description\">\r\n                                        <input type=\"text\" className=\"form-control\"\r\n                                            placeholder=\"name@example.com\"\r\n                                            value={question.description}\r\n                                            onChange={(event) => handleOnChange('QUESTION', question.id, event.target.value)} />\r\n                                        <label>Question {index + 1} description</label>\r\n                                    </div>\r\n                                    <div className=\"group-upload\">\r\n                                        <label className=\"label-upload\" htmlFor={`${question.id}`}><RiImageAddFill  /></label>\r\n                                        <input type={'file'} hidden id = {`${question.id}`} \r\n                                        onChange={(Event) => handleOnChangeFileQuestion(question.id, Event)}></input>\r\n                                        <span>{question.imageName ? \r\n                                        <span style={{cursor:'pointer'}} onClick={()=> handleOnClickImage(question.id)}>{question.imageName}</span> : \r\n                                        'No file uploaded'}</span>\r\n                                    </div>\r\n                                    <div className=\"btn-add\">\r\n\r\n                                        <span onClick={() => handleAddRemoveQuestions('ADD', '')}>\r\n                                            <IoIosAdd className=\"icon-add\" /></span>\r\n                                        {questions.length > 1 &&\r\n                                            <span onClick={() => handleAddRemoveQuestions('REMOVE', question.id)}>\r\n                                                <AiFillMinusCircle className=\"icon-remove\" /></span>\r\n                                        }\r\n\r\n                                    </div>\r\n                                </div>\r\n                                {\r\n                                    question.answers && question.answers.length > 0\r\n                                    && question.answers.map((answer, index) => {\r\n                                        return (\r\n                                            <div className=\"answers-content\" key={answer.id}>\r\n                                                <input className=\"form-check-input iscorrected\" type=\"checkbox\" \r\n                                                checked={answer.isCorrect}\r\n                                                onChange={(Event) => handleOnChangeAnswer('CHECKED', question.id, answer.id,Event.target.checked)}/>\r\n                                                <div className=\"form-floating col-6 description\">\r\n                                                    <input type=\"type\" className=\"form-control answer-name\" \r\n                                                        placeholder=\"answer 1\" value={answer.description} \r\n                                                        onChange={(Event) => handleOnChangeAnswer('INPUT',question.id,answer.id,Event.target.value)}/>\r\n                                                    <label>Answer {index + 1}</label>\r\n                                                </div>\r\n                                                <div className=\"btn-group\">\r\n                                                    <span onClick={() => handleAddRemoveAnswer('ADD', question.id)}>\r\n                                                        <IoIosAdd className=\"icon-add\" />\r\n                                                    </span>\r\n                                                    {question.answers.length > 1 &&\r\n                                                        <span\r\n                                                            onClick={() => handleAddRemoveAnswer('REMOVE', question.id, answer.id)}>\r\n                                                            <BiCheckboxMinus className=\"icon-remove\" />\r\n                                                        </span>\r\n                                                    }\r\n                                                </div>\r\n                                            </div>\r\n                                        )\r\n                                    })\r\n                                }\r\n                               \r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n                {\r\n                    questions && questions.length > 0 && \r\n                    <button className=\"btn btn-primary\"\r\n                    onClick={()=>handleSubmitQuestion()}> Save questions</button>\r\n                }\r\n            </div>\r\n            {prewImage === true &&\r\n                <Lightbox image={dataPreviewImage.url}\r\n                    title={dataPreviewImage.title}\r\n                    onClose={() => setPrewImage(false)}>\r\n                </Lightbox>\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default QuizQA","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Admin\\Content\\Quiz\\AssignQuiz.js",[],[],"D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\User\\QuizContent\\RightContent.js",[],[],"D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\User\\QuizContent\\CountDown.js",["435"],[],"import { useState, useEffect } from \"react\";\r\n\r\nconst CountDown = (props) => {\r\n    const [duration, setDuration] = useState(300); \r\n    const toHHMMSS = (secs) => {\r\n        const sec_num = parseInt(secs, 10)\r\n        const hours = Math.floor(sec_num / 3600)\r\n        const minutes = Math.floor(sec_num / 60) % 60\r\n        const seconds = sec_num % 60\r\n\r\n        return [hours, minutes, seconds]\r\n            .map(v => v < 10 ? \"0\" + v : v)\r\n            .filter((v, i) => v !== \"00\" || i > 0)\r\n            .join(\":\")\r\n    }\r\n    useEffect(()=>{\r\n        if (duration === 0) \r\n        {\r\n            props.onTimeUp();\r\n            return;\r\n        }\r\n        const timer = setInterval(()=>{\r\n            setDuration(duration - 1)\r\n        }, 1000)\r\n        return () => {\r\n            clearInterval(timer);\r\n        }\r\n    },[duration])\r\n    return (\r\n        <div className=\"countdown-container\">\r\n            {toHHMMSS(duration)}\r\n        </div>\r\n    )\r\n}\r\nexport default CountDown;","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\Route\\PrivateRoute.js",["436"],[],"import { useSelector } from 'react-redux'\r\nimport { Navigate, useNavigate } from 'react-router-dom';\r\nconst PrivateRoute = (props) => {\r\n    const isAuthenticated = useSelector(state => state.user.isAuthenticated);\r\n    const navigate = useNavigate();\r\n    if (!isAuthenticated){\r\n        return (\r\n            <Navigate to=\"/login\"></Navigate>\r\n        )\r\n    }\r\n    return ( \r\n        <>\r\n            {props.children}\r\n        </>\r\n    )\r\n}\r\nexport default PrivateRoute;","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\redux\\action\\userAction.js",[],[],"D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\component\\Header\\Language.js",["437","438"],[],"import NavDropdown from 'react-bootstrap/NavDropdown';\r\nimport { useTranslation, Trans } from 'react-i18next';\r\n\r\nconst Language = () => {\r\n    const { t, i18n } = useTranslation();\r\n    const handleChangeLanguage = (language) => {\r\n        i18n.changeLanguage(language)\r\n    }\r\n    return (\r\n        <>\r\n            <NavDropdown title={i18n.language === 'vi'?'Viet Nam' : 'English'} id=\"basic-nav-dropdown2\" className='languages'>\r\n                <NavDropdown.Item onClick={() => handleChangeLanguage('en')}>English</NavDropdown.Item>\r\n                <NavDropdown.Item onClick={() => handleChangeLanguage('vi')}>Viet Nam</NavDropdown.Item>\r\n            </NavDropdown>\r\n        </>\r\n    )\r\n}\r\nexport default Language;","D:\\Fullstack\\Reactjs\\Basic\\base-react-redux\\src\\utils\\i18n.js",[],[],"D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\index.js",[],[],"D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\reportWebVitals.js",[],[],[],"D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\Layout.js",["439","440","441"],[],"D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\App.js",["442","443"],[],"D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\utils\\i18n.js",[],[],"D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\component\\Header.js",["444"],[],"D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\redux\\store.js",[],[],[],"D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\component\\FirstPage.js",["445","446","447","448","449"],[],"D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\component\\DatePicker.js",[],[],"D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\utils\\KeyCodeUtils.js",[],[],"D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\component\\SecondPage.js",["450","451","452"],[],"D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\component\\FormNationCard.js",[],[],"D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\component\\ThirdPage.js",[],[],"D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\component\\FourPage.js",[],[],"D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\component\\FifthPage.js",["453","454"],[],"D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\component\\SixPage.js",[],[],"D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\component\\SevenPage.js",[],[],"D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\component\\DetailStudies.js",[],[],"D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\component\\EightPage_New.js",["455"],[],"D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\component\\NinePage.js",["456","457","458"],[],"D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\component\\TenthPage.js",["459","460"],[],"D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\component\\EleventhPage.js",["461","462"],[],"D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\component\\TwelvethPage.js",[],[],"D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\component\\ThreeTeenthPage.js",[],[],"D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\redux\\reducer\\rootReducer.js",[],[],"D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\redux\\reducer\\userReducer.js",[],[],"D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\component\\Notice.js",[],[],"D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\component\\FourteenPage.js",["463"],[],"D:\\Clone Web\\Frontend-IMMI-462-master\\Fontend-IMMI-462_Remake\\src\\component\\SubmitPage.js",[],[],{"ruleId":"464","severity":1,"message":"465","line":13,"column":8,"nodeType":"466","messageId":"467","endLine":13,"endColumn":12},{"ruleId":"464","severity":1,"message":"468","line":4,"column":11,"nodeType":"466","messageId":"467","endLine":4,"endColumn":15},{"ruleId":"464","severity":1,"message":"468","line":5,"column":10,"nodeType":"466","messageId":"467","endLine":5,"endColumn":14},{"ruleId":"464","severity":1,"message":"469","line":9,"column":10,"nodeType":"466","messageId":"467","endLine":9,"endColumn":17},{"ruleId":"464","severity":1,"message":"470","line":4,"column":26,"nodeType":"466","messageId":"467","endLine":4,"endColumn":31},{"ruleId":"464","severity":1,"message":"471","line":16,"column":9,"nodeType":"466","messageId":"467","endLine":16,"endColumn":20},{"ruleId":"472","severity":1,"message":"473","line":13,"column":27,"nodeType":"474","messageId":"475","endLine":13,"endColumn":29},{"ruleId":"464","severity":1,"message":"476","line":6,"column":10,"nodeType":"466","messageId":"467","endLine":6,"endColumn":15},{"ruleId":"464","severity":1,"message":"477","line":19,"column":11,"nodeType":"466","messageId":"467","endLine":19,"endColumn":21},{"ruleId":"478","severity":1,"message":"479","line":109,"column":43,"nodeType":"480","endLine":109,"endColumn":68},{"ruleId":"464","severity":1,"message":"481","line":4,"column":8,"nodeType":"466","messageId":"467","endLine":4,"endColumn":17},{"ruleId":"464","severity":1,"message":"482","line":1,"column":10,"nodeType":"466","messageId":"467","endLine":1,"endColumn":14},{"ruleId":"464","severity":1,"message":"476","line":6,"column":10,"nodeType":"466","messageId":"467","endLine":6,"endColumn":15},{"ruleId":"483","severity":1,"message":"484","line":32,"column":8,"nodeType":"485","endLine":32,"endColumn":26,"suggestions":"486"},{"ruleId":"478","severity":1,"message":"479","line":103,"column":43,"nodeType":"480","endLine":103,"endColumn":67},{"ruleId":"464","severity":1,"message":"487","line":7,"column":38,"nodeType":"466","messageId":"467","endLine":7,"endColumn":47},{"ruleId":"464","severity":1,"message":"488","line":11,"column":12,"nodeType":"466","messageId":"467","endLine":11,"endColumn":17},{"ruleId":"483","severity":1,"message":"489","line":29,"column":8,"nodeType":"485","endLine":29,"endColumn":24,"suggestions":"490"},{"ruleId":"478","severity":1,"message":"479","line":68,"column":43,"nodeType":"480","endLine":68,"endColumn":67},{"ruleId":"464","severity":1,"message":"491","line":1,"column":17,"nodeType":"466","messageId":"467","endLine":1,"endColumn":25},{"ruleId":"464","severity":1,"message":"476","line":6,"column":10,"nodeType":"466","messageId":"467","endLine":6,"endColumn":15},{"ruleId":"464","severity":1,"message":"492","line":2,"column":17,"nodeType":"466","messageId":"467","endLine":2,"endColumn":26},{"ruleId":"464","severity":1,"message":"491","line":2,"column":28,"nodeType":"466","messageId":"467","endLine":2,"endColumn":36},{"ruleId":"464","severity":1,"message":"493","line":8,"column":8,"nodeType":"466","messageId":"467","endLine":8,"endColumn":12},{"ruleId":"464","severity":1,"message":"494","line":4,"column":13,"nodeType":"466","messageId":"467","endLine":4,"endColumn":22},{"ruleId":"483","severity":1,"message":"495","line":110,"column":7,"nodeType":"485","endLine":110,"endColumn":15,"suggestions":"496"},{"ruleId":"478","severity":1,"message":"479","line":119,"column":21,"nodeType":"480","endLine":119,"endColumn":28},{"ruleId":"478","severity":1,"message":"479","line":19,"column":17,"nodeType":"480","endLine":19,"endColumn":137},{"ruleId":"464","severity":1,"message":"491","line":1,"column":17,"nodeType":"466","messageId":"467","endLine":1,"endColumn":25},{"ruleId":"464","severity":1,"message":"492","line":1,"column":20,"nodeType":"466","messageId":"467","endLine":1,"endColumn":29},{"ruleId":"464","severity":1,"message":"497","line":4,"column":8,"nodeType":"466","messageId":"467","endLine":4,"endColumn":14},{"ruleId":"464","severity":1,"message":"498","line":15,"column":12,"nodeType":"466","messageId":"467","endLine":15,"endColumn":21},{"ruleId":"483","severity":1,"message":"499","line":42,"column":8,"nodeType":"485","endLine":42,"endColumn":24,"suggestions":"500"},{"ruleId":"478","severity":1,"message":"479","line":83,"column":43,"nodeType":"480","endLine":83,"endColumn":67},{"ruleId":"464","severity":1,"message":"491","line":1,"column":17,"nodeType":"466","messageId":"467","endLine":1,"endColumn":25},{"ruleId":"464","severity":1,"message":"501","line":4,"column":10,"nodeType":"466","messageId":"467","endLine":4,"endColumn":21},{"ruleId":"464","severity":1,"message":"502","line":9,"column":24,"nodeType":"466","messageId":"467","endLine":9,"endColumn":32},{"ruleId":"464","severity":1,"message":"503","line":9,"column":27,"nodeType":"466","messageId":"467","endLine":9,"endColumn":49},{"ruleId":"464","severity":1,"message":"504","line":9,"column":51,"nodeType":"466","messageId":"467","endLine":9,"endColumn":72},{"ruleId":"505","severity":1,"message":"506","line":97,"column":43,"nodeType":"466","messageId":"507","endLine":97,"endColumn":51},{"ruleId":"483","severity":1,"message":"508","line":257,"column":8,"nodeType":"485","endLine":257,"endColumn":22,"suggestions":"509"},{"ruleId":"483","severity":1,"message":"510","line":28,"column":7,"nodeType":"485","endLine":28,"endColumn":17,"suggestions":"511"},{"ruleId":"464","severity":1,"message":"512","line":5,"column":11,"nodeType":"466","messageId":"467","endLine":5,"endColumn":19},{"ruleId":"464","severity":1,"message":"470","line":2,"column":26,"nodeType":"466","messageId":"467","endLine":2,"endColumn":31},{"ruleId":"464","severity":1,"message":"513","line":5,"column":13,"nodeType":"466","messageId":"467","endLine":5,"endColumn":14},{"ruleId":"464","severity":1,"message":"514","line":18,"column":8,"nodeType":"466","messageId":"467","endLine":18,"endColumn":14},{"ruleId":"464","severity":1,"message":"515","line":22,"column":7,"nodeType":"466","messageId":"467","endLine":22,"endColumn":15},{"ruleId":"516","severity":1,"message":"517","line":40,"column":47,"nodeType":"480","messageId":"518","endLine":40,"endColumn":64},{"ruleId":"464","severity":1,"message":"519","line":4,"column":8,"nodeType":"466","messageId":"467","endLine":4,"endColumn":17},{"ruleId":"464","severity":1,"message":"512","line":7,"column":11,"nodeType":"466","messageId":"467","endLine":7,"endColumn":19},{"ruleId":"478","severity":1,"message":"479","line":12,"column":21,"nodeType":"480","endLine":12,"endColumn":55},{"ruleId":"464","severity":1,"message":"482","line":2,"column":10,"nodeType":"466","messageId":"467","endLine":2,"endColumn":14},{"ruleId":"464","severity":1,"message":"520","line":21,"column":12,"nodeType":"466","messageId":"467","endLine":21,"endColumn":22},{"ruleId":"464","severity":1,"message":"521","line":21,"column":23,"nodeType":"466","messageId":"467","endLine":21,"endColumn":36},{"ruleId":"464","severity":1,"message":"522","line":23,"column":12,"nodeType":"466","messageId":"467","endLine":23,"endColumn":17},{"ruleId":"464","severity":1,"message":"523","line":25,"column":11,"nodeType":"466","messageId":"467","endLine":25,"endColumn":24},{"ruleId":"464","severity":1,"message":"482","line":2,"column":10,"nodeType":"466","messageId":"467","endLine":2,"endColumn":14},{"ruleId":"464","severity":1,"message":"524","line":17,"column":12,"nodeType":"466","messageId":"467","endLine":17,"endColumn":27},{"ruleId":"464","severity":1,"message":"525","line":17,"column":29,"nodeType":"466","messageId":"467","endLine":17,"endColumn":47},{"ruleId":"464","severity":1,"message":"522","line":11,"column":12,"nodeType":"466","messageId":"467","endLine":11,"endColumn":17},{"ruleId":"464","severity":1,"message":"523","line":13,"column":11,"nodeType":"466","messageId":"467","endLine":13,"endColumn":24},{"ruleId":"464","severity":1,"message":"526","line":1,"column":10,"nodeType":"466","messageId":"467","endLine":1,"endColumn":22},{"ruleId":"464","severity":1,"message":"482","line":4,"column":10,"nodeType":"466","messageId":"467","endLine":4,"endColumn":14},{"ruleId":"464","severity":1,"message":"522","line":14,"column":12,"nodeType":"466","messageId":"467","endLine":14,"endColumn":17},{"ruleId":"464","severity":1,"message":"523","line":16,"column":11,"nodeType":"466","messageId":"467","endLine":16,"endColumn":24},{"ruleId":"464","severity":1,"message":"527","line":2,"column":10,"nodeType":"466","messageId":"467","endLine":2,"endColumn":17},{"ruleId":"464","severity":1,"message":"491","line":2,"column":19,"nodeType":"466","messageId":"467","endLine":2,"endColumn":27},{"ruleId":"464","severity":1,"message":"527","line":2,"column":10,"nodeType":"466","messageId":"467","endLine":2,"endColumn":17},{"ruleId":"464","severity":1,"message":"491","line":2,"column":19,"nodeType":"466","messageId":"467","endLine":2,"endColumn":27},{"ruleId":"464","severity":1,"message":"528","line":6,"column":11,"nodeType":"466","messageId":"467","endLine":6,"endColumn":18},"no-unused-vars","'i18n' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'doLogin' is defined but never used.","'Trans' is defined but never used.","'MdDashboard' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Toast' is defined but never used.","'handleShow' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'TableUser' is defined but never used.","'Form' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dataUpdate'. Either include it or remove the dependency array.","ArrayExpression",["529"],"'resetData' is assigned a value but never used.","'image' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dataView'. Either include it or remove the dependency array.",["530"],"'useState' is defined but never used.","'useEffect' is defined but never used.","'User' is defined but never used.","'cloneDeep' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchQuestion'. Either include it or remove the dependency array.",["531"],"'Select' is defined but never used.","'quizImage' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dataEdit'. Either include it or remove the dependency array.",["532"],"'TbHeartPlus' is defined but never used.","'validate' is defined but never used.","'postNewQuestionForQuiz' is defined but never used.","'postAnswerForQuestion' is defined but never used.","no-use-before-define","'toBase64' was used before it was defined.","usedBeforeDefined","React Hook useEffect has a missing dependency: 'fetchQuizWithQA'. Either include it or remove the dependency array.",["533"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["534"],"'navigate' is assigned a value but never used.","'t' is assigned a value but never used.","'Header' is defined but never used.","'Notfound' is assigned a value but never used.","react/jsx-pascal-case","Imported JSX component EightPage_New must be in PascalCase or SCREAMING_SNAKE_CASE","usePascalOrSnakeCase","'FirstPage' is defined but never used.","'isSelected' is assigned a value but never used.","'setIsSelected' is assigned a value but never used.","'value' is assigned a value but never used.","'changeHandler' is assigned a value but never used.","'passportCountry' is assigned a value but never used.","'setpassportCountry' is assigned a value but never used.","'defaultsDeep' is defined but never used.","'useMemo' is defined but never used.","'options' is assigned a value but never used.",{"desc":"535","fix":"536"},{"desc":"537","fix":"538"},{"desc":"539","fix":"540"},{"desc":"541","fix":"542"},{"desc":"543","fix":"544"},{"desc":"545","fix":"546"},"Update the dependencies array to be: [dataUpdate, props.dataUpdate]",{"range":"547","text":"548"},"Update the dependencies array to be: [dataView, props.dataView]",{"range":"549","text":"550"},"Update the dependencies array to be: [fetchQuestion, quizId]",{"range":"551","text":"552"},"Update the dependencies array to be: [dataEdit, props.dataEdit]",{"range":"553","text":"554"},"Update the dependencies array to be: [fetchQuizWithQA, selectedQuiz]",{"range":"555","text":"556"},"Update the dependencies array to be: [duration, props]",{"range":"557","text":"558"},[1226,1244],"[dataUpdate, props.dataUpdate]",[1135,1151],"[dataView, props.dataView]",[4069,4077],"[fetchQuestion, quizId]",[1612,1628],"[dataEdit, props.dataEdit]",[9427,9441],"[fetchQuizWithQA, selectedQuiz]",[825,835],"[duration, props]"]